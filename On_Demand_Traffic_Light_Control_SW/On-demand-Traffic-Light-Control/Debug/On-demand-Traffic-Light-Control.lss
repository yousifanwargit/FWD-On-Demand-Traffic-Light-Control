
On-demand-Traffic-Light-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800066  00800066  00000d08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b5d  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bdb  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011a2  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00004848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073b  00000000  00000000  00004c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d85  00000000  00000000  000053bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  8a:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
};

uint8 val = 0;


ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31

	TIMER0_DelayInMilliSec(500);
  b4:	84 ef       	ldi	r24, 0xF4	; 244
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
	GPIO_PIN_READ_LOGIC(&buttonPin, &val);
  bc:	66 e6       	ldi	r22, 0x66	; 102
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <GPIO_PIN_READ_LOGIC>
	
	if (val == 0)
  c8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  cc:	88 23       	and	r24, r24
  ce:	d9 f1       	breq	.+118    	; 0x146 <__vector_1+0xb4>
		// long press detected
		// nothing here
		// return immediately to continue normal mode
		//return;
	}
	else if (val != 0)
  d0:	d1 f1       	breq	.+116    	; 0x146 <__vector_1+0xb4>
	{
		// there is on long press
		// check for current state (cars)
		uint8 currentMode = TrafficLights_CurrentMode();
  d2:	0e 94 a6 01 	call	0x34c	; 0x34c <TrafficLights_CurrentMode>
		if (currentMode == CARS_MODE_GREEN || currentMode == CARS_MODE_YELLOW)
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	e8 f4       	brcc	.+58     	; 0x116 <__vector_1+0x84>
		{
			
			// if cars state is green or yellow
			/********************************************/
			// turn peds red on
			PedsRedEnable();
  dc:	0e 94 98 01 	call	0x330	; 0x330 <PedsRedEnable>
			//turn car green off
			CarsGreenDisable();
  e0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CarsGreenDisable>
			// blink yellow for 5 secs
			Cars_Peds_Yellow_Blinking();
  e4:	0e 94 bc 01 	call	0x378	; 0x378 <Cars_Peds_Yellow_Blinking>
			// turn  peds red off and turn peds green on
			PedsRedDisable();
  e8:	0e 94 9f 01 	call	0x33e	; 0x33e <PedsRedDisable>
			PedsGreenEnable();
  ec:	0e 94 81 01 	call	0x302	; 0x302 <PedsGreenEnable>
			// turn cars red on and turn cars green off
			CarsRedEnable();
  f0:	0e 94 88 01 	call	0x310	; 0x310 <CarsRedEnable>
			CarsGreenDisable();
  f4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CarsGreenDisable>
			// wait for 5 secs
			TIMER0_DelayInMilliSec(5000);
  f8:	88 e8       	ldi	r24, 0x88	; 136
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
			//turn car red off
			CarsRedDisable();
 100:	0e 94 91 01 	call	0x322	; 0x322 <CarsRedDisable>
			// blink both yellow leds for 5 secs
			Cars_Peds_Yellow_Blinking();
 104:	0e 94 bc 01 	call	0x378	; 0x378 <Cars_Peds_Yellow_Blinking>
			/********************************************/
			// turn all leds of
			TurnAllOff();
 108:	0e 94 3e 02 	call	0x47c	; 0x47c <TurnAllOff>
			// reset timer to escape after return
			TIMER0_reset();
 10c:	0e 94 ad 04 	call	0x95a	; 0x95a <TIMER0_reset>
			// reset normal mode to beginning
			ResetNormalMode();
 110:	0e 94 63 02 	call	0x4c6	; 0x4c6 <ResetNormalMode>
 114:	18 c0       	rjmp	.+48     	; 0x146 <__vector_1+0xb4>
			/********************************************/
		}
		else if (TrafficLights_CurrentMode() == CARS_MODE_RED)
 116:	0e 94 a6 01 	call	0x34c	; 0x34c <TrafficLights_CurrentMode>
 11a:	81 11       	cpse	r24, r1
 11c:	14 c0       	rjmp	.+40     	; 0x146 <__vector_1+0xb4>
		{
			// if cars state is  red
			/********************************************/
			//turn peds green on
			PedsGreenEnable();
 11e:	0e 94 81 01 	call	0x302	; 0x302 <PedsGreenEnable>
			// turn cars red on and turn cars green off
			CarsRedEnable();
 122:	0e 94 88 01 	call	0x310	; 0x310 <CarsRedEnable>
			CarsGreenDisable();
 126:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CarsGreenDisable>
			// wait for 5 secs
			TIMER0_DelayInMilliSec(5000);
 12a:	88 e8       	ldi	r24, 0x88	; 136
 12c:	93 e1       	ldi	r25, 0x13	; 19
 12e:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
			//turn cars red off
			CarsRedDisable();
 132:	0e 94 91 01 	call	0x322	; 0x322 <CarsRedDisable>
			// blink both yellow while peds green on
			Cars_Peds_Yellow_Blinking();
 136:	0e 94 bc 01 	call	0x378	; 0x378 <Cars_Peds_Yellow_Blinking>
			/********************************************/
			// turn off all leds
			TurnAllOff();
 13a:	0e 94 3e 02 	call	0x47c	; 0x47c <TurnAllOff>
			// reset timer to escape after return
			TIMER0_reset();
 13e:	0e 94 ad 04 	call	0x95a	; 0x95a <TIMER0_reset>
			// reset normal mode to beginning
			ResetNormalMode();
 142:	0e 94 63 02 	call	0x4c6	; 0x4c6 <ResetNormalMode>
		}
	}
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <appInit>:

void appInit(void){
	// initialize external interrupt 0
	EXT_INT_init(INT0, FALLING_EDGE);
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EXT_INT_init>

	// initialize traffic lights module
	All_Lights_init();
 170:	0e 94 4b 01 	call	0x296	; 0x296 <All_Lights_init>
 174:	08 95       	ret

00000176 <appStart>:
}
void appStart(void){
	while(1){
		// enable external interrupt 0
		EXT_INT_enable(INT0);
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 b8 02 	call	0x570	; 0x570 <EXT_INT_enable>
		// call normal mode function
		LIGHTS_NormalMode();
 17c:	0e 94 00 02 	call	0x400	; 0x400 <LIGHTS_NormalMode>
 180:	fa cf       	rjmp	.-12     	; 0x176 <appStart>

00000182 <led_init>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_init(const led_t *_led){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	b1 f0       	breq	.+44     	; 0x1bc <led_init+0x3a>
 190:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 192:	80 81       	ld	r24, Z
 194:	28 2f       	mov	r18, r24
 196:	26 95       	lsr	r18
 198:	26 95       	lsr	r18
 19a:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 19c:	23 70       	andi	r18, 0x03	; 3
 19e:	22 0f       	add	r18, r18
 1a0:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 1a2:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1a4:	98 2f       	mov	r25, r24
 1a6:	92 95       	swap	r25
 1a8:	90 7f       	andi	r25, 0xF0	; 240
 1aa:	82 2f       	mov	r24, r18
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	89 2b       	or	r24, r25
 1b0:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_INIT(&pin);
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <GPIO_PIN_INIT>
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <led_init+0x3c>
  * @complexity : O(1)
  */
Std_ReturnType led_init(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_INIT(&pin);
	}
	return ret;
}
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <led_turn_on>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_turn_on(const led_t *_led){
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	1f 92       	push	r1
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	b9 f0       	breq	.+46     	; 0x202 <led_turn_on+0x3c>
 1d4:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 1d6:	80 81       	ld	r24, Z
 1d8:	28 2f       	mov	r18, r24
 1da:	26 95       	lsr	r18
 1dc:	26 95       	lsr	r18
 1de:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1e0:	23 70       	andi	r18, 0x03	; 3
 1e2:	22 0f       	add	r18, r18
 1e4:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 1e6:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1e8:	98 2f       	mov	r25, r24
 1ea:	92 95       	swap	r25
 1ec:	90 7f       	andi	r25, 0xF0	; 240
 1ee:	82 2f       	mov	r24, r18
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	89 2b       	or	r24, r25
 1f4:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_HIGH);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	0e 94 56 03 	call	0x6ac	; 0x6ac <GPIO_PIN_WRITE_LOGIC>
 200:	01 c0       	rjmp	.+2      	; 0x204 <led_turn_on+0x3e>
  * @complexity : O(1)
  */
Std_ReturnType led_turn_on(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 202:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_HIGH);
	}
	return ret;
}
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <led_turn_off>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_turn_off(const led_t *_led){
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	b9 f0       	breq	.+46     	; 0x248 <led_turn_off+0x3c>
 21a:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 21c:	80 81       	ld	r24, Z
 21e:	28 2f       	mov	r18, r24
 220:	26 95       	lsr	r18
 222:	26 95       	lsr	r18
 224:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 226:	23 70       	andi	r18, 0x03	; 3
 228:	22 0f       	add	r18, r18
 22a:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 22c:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 22e:	98 2f       	mov	r25, r24
 230:	92 95       	swap	r25
 232:	90 7f       	andi	r25, 0xF0	; 240
 234:	82 2f       	mov	r24, r18
 236:	81 60       	ori	r24, 0x01	; 1
 238:	89 2b       	or	r24, r25
 23a:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_LOW);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 56 03 	call	0x6ac	; 0x6ac <GPIO_PIN_WRITE_LOGIC>
 246:	01 c0       	rjmp	.+2      	; 0x24a <led_turn_off+0x3e>
  * @complexity : O(1)
  */
Std_ReturnType led_turn_off(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 248:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_LOW);
	}
	return ret;
}
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <led_tog>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_tog(const led_t *_led){
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	1f 92       	push	r1
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	b1 f0       	breq	.+44     	; 0x28c <led_tog+0x3a>
 260:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 262:	80 81       	ld	r24, Z
 264:	28 2f       	mov	r18, r24
 266:	26 95       	lsr	r18
 268:	26 95       	lsr	r18
 26a:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 26c:	23 70       	andi	r18, 0x03	; 3
 26e:	22 0f       	add	r18, r18
 270:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 272:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 274:	98 2f       	mov	r25, r24
 276:	92 95       	swap	r25
 278:	90 7f       	andi	r25, 0xF0	; 240
 27a:	82 2f       	mov	r24, r18
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	89 2b       	or	r24, r25
 280:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_TOGGLE(&pin);
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_PIN_TOGGLE>
 28a:	01 c0       	rjmp	.+2      	; 0x28e <led_tog+0x3c>
  * @complexity : O(1)
  */
Std_ReturnType led_tog(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 28c:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_TOGGLE(&pin);
	}
	return ret;
}
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <All_Lights_init>:
}
void PedsGreenEnable(void){
	ret = led_turn_on(&peds_green);
}
void PedsGreenDisable(void){
	ret = led_turn_off(&peds_green);
 296:	85 e6       	ldi	r24, 0x65	; 101
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 c1 00 	call	0x182	; 0x182 <led_init>
 29e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2a2:	84 e6       	ldi	r24, 0x64	; 100
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 c1 00 	call	0x182	; 0x182 <led_init>
 2aa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 c1 00 	call	0x182	; 0x182 <led_init>
 2b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2ba:	83 e6       	ldi	r24, 0x63	; 99
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 c1 00 	call	0x182	; 0x182 <led_init>
 2c2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2c6:	82 e6       	ldi	r24, 0x62	; 98
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 c1 00 	call	0x182	; 0x182 <led_init>
 2ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2d2:	81 e6       	ldi	r24, 0x61	; 97
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 c1 00 	call	0x182	; 0x182 <led_init>
 2da:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2de:	08 95       	ret

000002e0 <CarsGreenEnable>:
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <cars_mode>
 2e6:	87 e6       	ldi	r24, 0x67	; 103
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <led_turn_on>
 2ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 2f2:	08 95       	ret

000002f4 <CarsGreenDisable>:
 2f4:	87 e6       	ldi	r24, 0x67	; 103
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 2fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 300:	08 95       	ret

00000302 <PedsGreenEnable>:
 302:	81 e6       	ldi	r24, 0x61	; 97
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <led_turn_on>
 30a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 30e:	08 95       	ret

00000310 <CarsRedEnable>:
	}
	// turn of cars yellow
	led_turn_off(&cars_yellow);
}
void CarsRedEnable(void){
	cars_mode = CARS_MODE_RED;
 310:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cars_mode>
	ret = led_turn_on(&cars_red);
 314:	85 e6       	ldi	r24, 0x65	; 101
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <led_turn_on>
 31c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 320:	08 95       	ret

00000322 <CarsRedDisable>:
}
void CarsRedDisable(void){
	ret = led_turn_off(&cars_red);
 322:	85 e6       	ldi	r24, 0x65	; 101
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 32a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 32e:	08 95       	ret

00000330 <PedsRedEnable>:
}
void PedsRedEnable(void){
	ret = led_turn_on(&peds_red);
 330:	83 e6       	ldi	r24, 0x63	; 99
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <led_turn_on>
 338:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 33c:	08 95       	ret

0000033e <PedsRedDisable>:
}
void PedsRedDisable(void){
	ret = led_turn_off(&peds_red);
 33e:	83 e6       	ldi	r24, 0x63	; 99
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 346:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 34a:	08 95       	ret

0000034c <TrafficLights_CurrentMode>:
}
uint8 TrafficLights_CurrentMode(void){
	return cars_mode;
}
 34c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <cars_mode>
 350:	08 95       	ret

00000352 <TurnCarsOff>:
void TurnCarsOff(void){
	ret = led_turn_off(&cars_red);
 352:	85 e6       	ldi	r24, 0x65	; 101
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 35a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&cars_yellow);
 35e:	84 e6       	ldi	r24, 0x64	; 100
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 366:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&cars_green);
 36a:	87 e6       	ldi	r24, 0x67	; 103
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 372:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 376:	08 95       	ret

00000378 <Cars_Peds_Yellow_Blinking>:
	ret = led_turn_on(&peds_green);
}
void PedsGreenDisable(void){
	ret = led_turn_off(&peds_green);
}
void Cars_Peds_Yellow_Blinking(void){
 378:	cf 93       	push	r28
	// define variable to be iterator
	uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <cars_mode>
	for (i = 1; i <= 10; i++)
 380:	c1 e0       	ldi	r28, 0x01	; 1
 382:	14 c0       	rjmp	.+40     	; 0x3ac <Cars_Peds_Yellow_Blinking+0x34>
	{
		// check for reset
		if (reset_flag == 1)
 384:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	19 f4       	brne	.+6      	; 0x392 <Cars_Peds_Yellow_Blinking+0x1a>
		{
			TurnCarsOff();
 38c:	0e 94 a9 01 	call	0x352	; 0x352 <TurnCarsOff>
			return;
 390:	17 c0       	rjmp	.+46     	; 0x3c0 <Cars_Peds_Yellow_Blinking+0x48>
		}
		// toggle cars yellow
		led_tog(&cars_yellow);
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 29 01 	call	0x252	; 0x252 <led_tog>
		led_tog(&peds_yellow);
 39a:	82 e6       	ldi	r24, 0x62	; 98
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 29 01 	call	0x252	; 0x252 <led_tog>
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
 3a2:	84 ef       	ldi	r24, 0xF4	; 244
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
void Cars_Peds_Yellow_Blinking(void){
	// define variable to be iterator
	uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
	for (i = 1; i <= 10; i++)
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
 3ac:	cb 30       	cpi	r28, 0x0B	; 11
 3ae:	50 f3       	brcs	.-44     	; 0x384 <Cars_Peds_Yellow_Blinking+0xc>
		led_tog(&peds_yellow);
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
	}
	// turn of cars yellow
	led_turn_off(&cars_yellow);
 3b0:	84 e6       	ldi	r24, 0x64	; 100
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
	led_turn_off(&peds_yellow);
 3b8:	82 e6       	ldi	r24, 0x62	; 98
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
}
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <CarsYellowBlinking>:
void CarsYellowBlinking(void){
 3c4:	cf 93       	push	r28
	// define variable to be iterator
	 uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <cars_mode>
	for (i = 1; i <= 10; i++)
 3cc:	c1 e0       	ldi	r28, 0x01	; 1
 3ce:	10 c0       	rjmp	.+32     	; 0x3f0 <CarsYellowBlinking+0x2c>
	{
		// check for reset
		if (reset_flag == 1)
 3d0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	19 f4       	brne	.+6      	; 0x3de <CarsYellowBlinking+0x1a>
		{
			TurnCarsOff();
 3d8:	0e 94 a9 01 	call	0x352	; 0x352 <TurnCarsOff>
			return;
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <CarsYellowBlinking+0x38>
		}
		// toggle cars yellow
		led_tog(&cars_yellow);
 3de:	84 e6       	ldi	r24, 0x64	; 100
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 29 01 	call	0x252	; 0x252 <led_tog>
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
 3e6:	84 ef       	ldi	r24, 0xF4	; 244
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
void CarsYellowBlinking(void){
	// define variable to be iterator
	 uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
	for (i = 1; i <= 10; i++)
 3ee:	cf 5f       	subi	r28, 0xFF	; 255
 3f0:	cb 30       	cpi	r28, 0x0B	; 11
 3f2:	70 f3       	brcs	.-36     	; 0x3d0 <CarsYellowBlinking+0xc>
		led_tog(&cars_yellow);
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
	}
	// turn of cars yellow
	led_turn_off(&cars_yellow);
 3f4:	84 e6       	ldi	r24, 0x64	; 100
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
}
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <LIGHTS_NormalMode>:
	ret = led_init(&peds_yellow);
	ret = led_init(&peds_green);
}
void LIGHTS_NormalMode(void){
	
	while (reset_flag == 0)
 400:	38 c0       	rjmp	.+112    	; 0x472 <LIGHTS_NormalMode+0x72>
		{
		// turn cars green on
		CarsGreenEnable();
 402:	0e 94 70 01 	call	0x2e0	; 0x2e0 <CarsGreenEnable>
		// wait for 5 secs then check for reset
		TIMER0_DelayInMilliSec(5000);
 406:	88 e8       	ldi	r24, 0x88	; 136
 408:	93 e1       	ldi	r25, 0x13	; 19
 40a:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
		if (reset_flag == 1)
 40e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	29 f4       	brne	.+10     	; 0x420 <LIGHTS_NormalMode+0x20>
		{
			TurnCarsOff();
 416:	0e 94 a9 01 	call	0x352	; 0x352 <TurnCarsOff>
			reset_flag = 0;
 41a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <reset_flag>
			break;
 41e:	08 95       	ret
		}
		// turn cars green off
		CarsGreenDisable();
 420:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CarsGreenDisable>
		// blink cars yellow for 5 secs
		CarsYellowBlinking();
 424:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <CarsYellowBlinking>
		// check for reset
		if (reset_flag == 1)
 428:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	29 f4       	brne	.+10     	; 0x43a <LIGHTS_NormalMode+0x3a>
		{
			TurnCarsOff();
 430:	0e 94 a9 01 	call	0x352	; 0x352 <TurnCarsOff>
			reset_flag = 0;
 434:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <reset_flag>
			break;
 438:	08 95       	ret
		}
		// turn cars red on
		CarsRedEnable();
 43a:	0e 94 88 01 	call	0x310	; 0x310 <CarsRedEnable>
		// wait for 5 secs then check for reset
		TIMER0_DelayInMilliSec(5000);
 43e:	88 e8       	ldi	r24, 0x88	; 136
 440:	93 e1       	ldi	r25, 0x13	; 19
 442:	0e 94 b1 04 	call	0x962	; 0x962 <TIMER0_DelayInMilliSec>
		if (reset_flag == 1)
 446:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	29 f4       	brne	.+10     	; 0x458 <LIGHTS_NormalMode+0x58>
		{
			TurnCarsOff();
 44e:	0e 94 a9 01 	call	0x352	; 0x352 <TurnCarsOff>
			reset_flag = 0;
 452:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <reset_flag>
			break;
 456:	08 95       	ret
		}
		// turn cars red off
		CarsRedDisable();
 458:	0e 94 91 01 	call	0x322	; 0x322 <CarsRedDisable>
		// blink cars yellow for  secs
		CarsYellowBlinking();
 45c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <CarsYellowBlinking>
		// check for reset
		if (reset_flag == 1)
 460:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	29 f4       	brne	.+10     	; 0x472 <LIGHTS_NormalMode+0x72>
		{
			TurnCarsOff();
 468:	0e 94 a9 01 	call	0x352	; 0x352 <TurnCarsOff>
			reset_flag = 0;
 46c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <reset_flag>
			break;
 470:	08 95       	ret
	ret = led_init(&peds_yellow);
	ret = led_init(&peds_green);
}
void LIGHTS_NormalMode(void){
	
	while (reset_flag == 0)
 472:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <reset_flag>
 476:	88 23       	and	r24, r24
 478:	21 f2       	breq	.-120    	; 0x402 <LIGHTS_NormalMode+0x2>
 47a:	08 95       	ret

0000047c <TurnAllOff>:
	ret = led_turn_off(&cars_red);
	ret = led_turn_off(&cars_yellow);
	ret = led_turn_off(&cars_green);
}
void TurnAllOff(void){
	ret = led_turn_off(&cars_red);
 47c:	85 e6       	ldi	r24, 0x65	; 101
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 484:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&cars_yellow);
 488:	84 e6       	ldi	r24, 0x64	; 100
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 490:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&cars_green);
 494:	87 e6       	ldi	r24, 0x67	; 103
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 49c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&peds_red);
 4a0:	83 e6       	ldi	r24, 0x63	; 99
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 4a8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&peds_yellow);
 4ac:	82 e6       	ldi	r24, 0x62	; 98
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 4b4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
	ret = led_turn_off(&peds_green);
 4b8:	81 e6       	ldi	r24, 0x61	; 97
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 06 01 	call	0x20c	; 0x20c <led_turn_off>
 4c0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ret>
 4c4:	08 95       	ret

000004c6 <ResetNormalMode>:
}
void ResetNormalMode(void){
	reset_flag = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <reset_flag>
 4cc:	08 95       	ret

000004ce <main>:
#include "MCAL/EXT_INT/ext_int.h"
#include "APP/app.h"

int main(void)
{
		appInit();
 4ce:	0e 94 b4 00 	call	0x168	; 0x168 <appInit>
		appStart();
 4d2:	0e 94 bb 00 	call	0x176	; 0x176 <appStart>

    
}
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	08 95       	ret

000004dc <EXT_INT_init>:
 */ 


#include "ext_int.h"

void EXT_INT_init(uint8 interupt, uint8 signal_type){
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	1f 92       	push	r1
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	16 2f       	mov	r17, r22
	
	SET_BIT(SREG, 7);
 4ee:	9f b7       	in	r25, 0x3f	; 63
 4f0:	90 68       	ori	r25, 0x80	; 128
 4f2:	9f bf       	out	0x3f, r25	; 63
	//select and enable chosen interrupt with chosen sense control
	//and initialize its corresponding pin
	switch (interupt)
 4f4:	86 30       	cpi	r24, 0x06	; 6
 4f6:	29 f0       	breq	.+10     	; 0x502 <EXT_INT_init+0x26>
 4f8:	87 30       	cpi	r24, 0x07	; 7
 4fa:	71 f0       	breq	.+28     	; 0x518 <EXT_INT_init+0x3c>
 4fc:	85 30       	cpi	r24, 0x05	; 5
 4fe:	89 f5       	brne	.+98     	; 0x562 <EXT_INT_init+0x86>
 500:	18 c0       	rjmp	.+48     	; 0x532 <EXT_INT_init+0x56>
	{
		case INT0: ;
			pin_config_t pin_int_0 = {
 502:	8e e2       	ldi	r24, 0x2E	; 46
 504:	89 83       	std	Y+1, r24	; 0x01
			};
		if (signal_type == FALLING_EDGE)
		{
			pin_int_0.LOGIC = GPIO_LOGIC_HIGH;
		}
		GPIO_PIN_INIT(&pin_int_0);
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <GPIO_PIN_INIT>
		MCUCR = signal_type;
 50e:	15 bf       	out	0x35, r17	; 53
		SET_BIT(GICR, 6);
 510:	8b b7       	in	r24, 0x3b	; 59
 512:	80 64       	ori	r24, 0x40	; 64
 514:	8b bf       	out	0x3b, r24	; 59
		break;
 516:	25 c0       	rjmp	.+74     	; 0x562 <EXT_INT_init+0x86>
		case INT1: ;
			pin_config_t pin_int_1 = {
 518:	8e e3       	ldi	r24, 0x3E	; 62
 51a:	89 83       	std	Y+1, r24	; 0x01
			};
		if (signal_type == FALLING_EDGE)
		{
			pin_int_1.LOGIC = GPIO_LOGIC_HIGH;
		}
		GPIO_PIN_INIT(&pin_int_1);
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	0e 94 71 04 	call	0x8e2	; 0x8e2 <GPIO_PIN_INIT>
		MCUCR = (signal_type << 2);
 524:	11 0f       	add	r17, r17
 526:	11 0f       	add	r17, r17
 528:	15 bf       	out	0x35, r17	; 53
		SET_BIT(GICR, 7);
 52a:	8b b7       	in	r24, 0x3b	; 59
 52c:	80 68       	ori	r24, 0x80	; 128
 52e:	8b bf       	out	0x3b, r24	; 59
		break;
 530:	18 c0       	rjmp	.+48     	; 0x562 <EXT_INT_init+0x86>
		case INT2: ;
			pin_config_t pin_int_2 = {
 532:	86 e2       	ldi	r24, 0x26	; 38
 534:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_INPUT,
			.PIN = GPIO_PIN2,
			.PORT = GPIO_PORTB,
			.LOGIC = GPIO_LOGIC_HIGH
			};
		GPIO_PIN_INIT(&pin_int_2);
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <GPIO_PIN_INIT>
		MCUCSR |= ((signal_type & 0x01) << 6);
 53e:	84 b7       	in	r24, 0x34	; 52
 540:	10 fb       	bst	r17, 0
 542:	ee 24       	eor	r14, r14
 544:	e0 f8       	bld	r14, 0
 546:	f1 2c       	mov	r15, r1
 548:	00 24       	eor	r0, r0
 54a:	f6 94       	lsr	r15
 54c:	e7 94       	ror	r14
 54e:	07 94       	ror	r0
 550:	f6 94       	lsr	r15
 552:	e7 94       	ror	r14
 554:	07 94       	ror	r0
 556:	fe 2c       	mov	r15, r14
 558:	e0 2c       	mov	r14, r0
 55a:	e8 2a       	or	r14, r24
 55c:	e4 be       	out	0x34, r14	; 52
		SET_BIT(GICR, 8);
 55e:	8b b7       	in	r24, 0x3b	; 59
 560:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
 562:	0f 90       	pop	r0
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	08 95       	ret

00000570 <EXT_INT_enable>:
void EXT_INT_enable(uint8 interupt){
	if (INT_0 == interupt){
 570:	81 11       	cpse	r24, r1
 572:	07 c0       	rjmp	.+14     	; 0x582 <EXT_INT_enable+0x12>
		SET_BIT(SREG, 7);
 574:	8f b7       	in	r24, 0x3f	; 63
 576:	80 68       	ori	r24, 0x80	; 128
 578:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(GICR, 6);
 57a:	8b b7       	in	r24, 0x3b	; 59
 57c:	80 64       	ori	r24, 0x40	; 64
 57e:	8b bf       	out	0x3b, r24	; 59
 580:	08 95       	ret
	} 
	else if (INT_1 == interupt){
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	31 f4       	brne	.+12     	; 0x592 <EXT_INT_enable+0x22>
		SET_BIT(SREG, 7);
 586:	8f b7       	in	r24, 0x3f	; 63
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(GICR, 8);
 58c:	8b b7       	in	r24, 0x3b	; 59
 58e:	8b bf       	out	0x3b, r24	; 59
 590:	08 95       	ret
	}
	else if(INT_2 == interupt){
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	29 f4       	brne	.+10     	; 0x5a0 <EXT_INT_enable+0x30>
		SET_BIT(SREG, 7);
 596:	8f b7       	in	r24, 0x3f	; 63
 598:	80 68       	ori	r24, 0x80	; 128
 59a:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(GICR, 9);
 59c:	8b b7       	in	r24, 0x3b	; 59
 59e:	8b bf       	out	0x3b, r24	; 59
 5a0:	08 95       	ret

000005a2 <GPIO_PIN_SET_DIRECTION>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <GPIO_PIN_SET_DIRECTION+0x6>
 5a6:	7e c0       	rjmp	.+252    	; 0x6a4 <GPIO_PIN_SET_DIRECTION+0x102>
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 81       	ld	r18, Z
 5ac:	22 95       	swap	r18
 5ae:	2f 70       	andi	r18, 0x0F	; 15
 5b0:	27 70       	andi	r18, 0x07	; 7
 5b2:	80 81       	ld	r24, Z
 5b4:	86 95       	lsr	r24
 5b6:	86 95       	lsr	r24
 5b8:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	11 f1       	breq	.+68     	; 0x602 <GPIO_PIN_SET_DIRECTION+0x60>
 5be:	30 f0       	brcs	.+12     	; 0x5cc <GPIO_PIN_SET_DIRECTION+0x2a>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	d1 f1       	breq	.+116    	; 0x638 <GPIO_PIN_SET_DIRECTION+0x96>
 5c4:	83 30       	cpi	r24, 0x03	; 3
 5c6:	09 f4       	brne	.+2      	; 0x5ca <GPIO_PIN_SET_DIRECTION+0x28>
 5c8:	52 c0       	rjmp	.+164    	; 0x66e <GPIO_PIN_SET_DIRECTION+0xcc>
 5ca:	6e c0       	rjmp	.+220    	; 0x6a8 <GPIO_PIN_SET_DIRECTION+0x106>
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
 5cc:	61 30       	cpi	r22, 0x01	; 1
 5ce:	61 f4       	brne	.+24     	; 0x5e8 <GPIO_PIN_SET_DIRECTION+0x46>
 5d0:	3a b3       	in	r19, 0x1a	; 26
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPIO_PIN_SET_DIRECTION+0x3a>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	2a 95       	dec	r18
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <GPIO_PIN_SET_DIRECTION+0x36>
 5e0:	83 2b       	or	r24, r19
 5e2:	8a bb       	out	0x1a, r24	; 26
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
 5e8:	3a b3       	in	r19, 0x1a	; 26
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <GPIO_PIN_SET_DIRECTION+0x52>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	2a 95       	dec	r18
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <GPIO_PIN_SET_DIRECTION+0x4e>
 5f8:	80 95       	com	r24
 5fa:	83 23       	and	r24, r19
 5fc:	8a bb       	out	0x1a, r24	; 26
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
 602:	61 30       	cpi	r22, 0x01	; 1
 604:	61 f4       	brne	.+24     	; 0x61e <GPIO_PIN_SET_DIRECTION+0x7c>
 606:	37 b3       	in	r19, 0x17	; 23
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <GPIO_PIN_SET_DIRECTION+0x70>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	2a 95       	dec	r18
 614:	e2 f7       	brpl	.-8      	; 0x60e <GPIO_PIN_SET_DIRECTION+0x6c>
 616:	83 2b       	or	r24, r19
 618:	87 bb       	out	0x17, r24	; 23
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
 61e:	37 b3       	in	r19, 0x17	; 23
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <GPIO_PIN_SET_DIRECTION+0x88>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	2a 95       	dec	r18
 62c:	e2 f7       	brpl	.-8      	; 0x626 <GPIO_PIN_SET_DIRECTION+0x84>
 62e:	80 95       	com	r24
 630:	83 23       	and	r24, r19
 632:	87 bb       	out	0x17, r24	; 23
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
 638:	61 30       	cpi	r22, 0x01	; 1
 63a:	61 f4       	brne	.+24     	; 0x654 <GPIO_PIN_SET_DIRECTION+0xb2>
 63c:	34 b3       	in	r19, 0x14	; 20
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <GPIO_PIN_SET_DIRECTION+0xa6>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	2a 95       	dec	r18
 64a:	e2 f7       	brpl	.-8      	; 0x644 <GPIO_PIN_SET_DIRECTION+0xa2>
 64c:	83 2b       	or	r24, r19
 64e:	84 bb       	out	0x14, r24	; 20
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
 654:	34 b3       	in	r19, 0x14	; 20
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <GPIO_PIN_SET_DIRECTION+0xbe>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	2a 95       	dec	r18
 662:	e2 f7       	brpl	.-8      	; 0x65c <GPIO_PIN_SET_DIRECTION+0xba>
 664:	80 95       	com	r24
 666:	83 23       	and	r24, r19
 668:	84 bb       	out	0x14, r24	; 20
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRD, _pin->PIN);} else{CLEAR_BIT(DDRD, _pin->PIN);} break;
 66e:	61 30       	cpi	r22, 0x01	; 1
 670:	61 f4       	brne	.+24     	; 0x68a <GPIO_PIN_SET_DIRECTION+0xe8>
 672:	31 b3       	in	r19, 0x11	; 17
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <GPIO_PIN_SET_DIRECTION+0xdc>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	2a 95       	dec	r18
 680:	e2 f7       	brpl	.-8      	; 0x67a <GPIO_PIN_SET_DIRECTION+0xd8>
 682:	83 2b       	or	r24, r19
 684:	81 bb       	out	0x11, r24	; 17
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRD, _pin->PIN);} else{CLEAR_BIT(DDRD, _pin->PIN);} break;
 68a:	31 b3       	in	r19, 0x11	; 17
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <GPIO_PIN_SET_DIRECTION+0xf4>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	2a 95       	dec	r18
 698:	e2 f7       	brpl	.-8      	; 0x692 <GPIO_PIN_SET_DIRECTION+0xf0>
 69a:	80 95       	com	r24
 69c:	83 23       	and	r24, r19
 69e:	81 bb       	out	0x11, r24	; 17
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRD, _pin->PIN);} else{CLEAR_BIT(DDRD, _pin->PIN);} break;
			default:	      	ret = E_NOT_OK;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return ret;
}
 6aa:	08 95       	ret

000006ac <GPIO_PIN_WRITE_LOGIC>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <GPIO_PIN_WRITE_LOGIC+0x6>
 6b0:	7e c0       	rjmp	.+252    	; 0x7ae <GPIO_PIN_WRITE_LOGIC+0x102>
 6b2:	fc 01       	movw	r30, r24
 6b4:	20 81       	ld	r18, Z
 6b6:	22 95       	swap	r18
 6b8:	2f 70       	andi	r18, 0x0F	; 15
 6ba:	27 70       	andi	r18, 0x07	; 7
 6bc:	80 81       	ld	r24, Z
 6be:	86 95       	lsr	r24
 6c0:	86 95       	lsr	r24
 6c2:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	11 f1       	breq	.+68     	; 0x70c <GPIO_PIN_WRITE_LOGIC+0x60>
 6c8:	30 f0       	brcs	.+12     	; 0x6d6 <GPIO_PIN_WRITE_LOGIC+0x2a>
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	d1 f1       	breq	.+116    	; 0x742 <GPIO_PIN_WRITE_LOGIC+0x96>
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <GPIO_PIN_WRITE_LOGIC+0x28>
 6d2:	52 c0       	rjmp	.+164    	; 0x778 <GPIO_PIN_WRITE_LOGIC+0xcc>
 6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <GPIO_PIN_WRITE_LOGIC+0x106>
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
 6d6:	61 30       	cpi	r22, 0x01	; 1
 6d8:	61 f4       	brne	.+24     	; 0x6f2 <GPIO_PIN_WRITE_LOGIC+0x46>
 6da:	3b b3       	in	r19, 0x1b	; 27
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <GPIO_PIN_WRITE_LOGIC+0x3a>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	2a 95       	dec	r18
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <GPIO_PIN_WRITE_LOGIC+0x36>
 6ea:	83 2b       	or	r24, r19
 6ec:	8b bb       	out	0x1b, r24	; 27
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
 6f2:	3b b3       	in	r19, 0x1b	; 27
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <GPIO_PIN_WRITE_LOGIC+0x52>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	2a 95       	dec	r18
 700:	e2 f7       	brpl	.-8      	; 0x6fa <GPIO_PIN_WRITE_LOGIC+0x4e>
 702:	80 95       	com	r24
 704:	83 23       	and	r24, r19
 706:	8b bb       	out	0x1b, r24	; 27
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
 70c:	61 30       	cpi	r22, 0x01	; 1
 70e:	61 f4       	brne	.+24     	; 0x728 <GPIO_PIN_WRITE_LOGIC+0x7c>
 710:	38 b3       	in	r19, 0x18	; 24
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <GPIO_PIN_WRITE_LOGIC+0x70>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	2a 95       	dec	r18
 71e:	e2 f7       	brpl	.-8      	; 0x718 <GPIO_PIN_WRITE_LOGIC+0x6c>
 720:	83 2b       	or	r24, r19
 722:	88 bb       	out	0x18, r24	; 24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
 728:	38 b3       	in	r19, 0x18	; 24
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <GPIO_PIN_WRITE_LOGIC+0x88>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	2a 95       	dec	r18
 736:	e2 f7       	brpl	.-8      	; 0x730 <GPIO_PIN_WRITE_LOGIC+0x84>
 738:	80 95       	com	r24
 73a:	83 23       	and	r24, r19
 73c:	88 bb       	out	0x18, r24	; 24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
 742:	61 30       	cpi	r22, 0x01	; 1
 744:	61 f4       	brne	.+24     	; 0x75e <GPIO_PIN_WRITE_LOGIC+0xb2>
 746:	35 b3       	in	r19, 0x15	; 21
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <GPIO_PIN_WRITE_LOGIC+0xa6>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	2a 95       	dec	r18
 754:	e2 f7       	brpl	.-8      	; 0x74e <GPIO_PIN_WRITE_LOGIC+0xa2>
 756:	83 2b       	or	r24, r19
 758:	85 bb       	out	0x15, r24	; 21
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
 75e:	35 b3       	in	r19, 0x15	; 21
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <GPIO_PIN_WRITE_LOGIC+0xbe>
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	2a 95       	dec	r18
 76c:	e2 f7       	brpl	.-8      	; 0x766 <GPIO_PIN_WRITE_LOGIC+0xba>
 76e:	80 95       	com	r24
 770:	83 23       	and	r24, r19
 772:	85 bb       	out	0x15, r24	; 21
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTD, _pin->PIN);} else{CLEAR_BIT(PORTD, _pin->PIN);} break;
 778:	61 30       	cpi	r22, 0x01	; 1
 77a:	61 f4       	brne	.+24     	; 0x794 <GPIO_PIN_WRITE_LOGIC+0xe8>
 77c:	32 b3       	in	r19, 0x12	; 18
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <GPIO_PIN_WRITE_LOGIC+0xdc>
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	2a 95       	dec	r18
 78a:	e2 f7       	brpl	.-8      	; 0x784 <GPIO_PIN_WRITE_LOGIC+0xd8>
 78c:	83 2b       	or	r24, r19
 78e:	82 bb       	out	0x12, r24	; 18
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTD, _pin->PIN);} else{CLEAR_BIT(PORTD, _pin->PIN);} break;
 794:	32 b3       	in	r19, 0x12	; 18
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <GPIO_PIN_WRITE_LOGIC+0xf4>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	2a 95       	dec	r18
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <GPIO_PIN_WRITE_LOGIC+0xf0>
 7a4:	80 95       	com	r24
 7a6:	83 23       	and	r24, r19
 7a8:	82 bb       	out	0x12, r24	; 18
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTD, _pin->PIN);} else{CLEAR_BIT(PORTD, _pin->PIN);} break;
			default:	      	ret = E_NOT_OK;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 7b4:	08 95       	ret

000007b6 <GPIO_PIN_READ_LOGIC>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (NULL == pin_status) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	09 f4       	brne	.+2      	; 0x7bc <GPIO_PIN_READ_LOGIC+0x6>
 7ba:	45 c0       	rjmp	.+138    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7bc:	61 15       	cp	r22, r1
 7be:	71 05       	cpc	r23, r1
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <GPIO_PIN_READ_LOGIC+0xe>
 7c2:	43 c0       	rjmp	.+134    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7c4:	fc 01       	movw	r30, r24
 7c6:	20 81       	ld	r18, Z
 7c8:	22 95       	swap	r18
 7ca:	2f 70       	andi	r18, 0x0F	; 15
 7cc:	27 70       	andi	r18, 0x07	; 7
 7ce:	80 81       	ld	r24, Z
 7d0:	86 95       	lsr	r24
 7d2:	86 95       	lsr	r24
 7d4:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	91 f0       	breq	.+36     	; 0x7fe <GPIO_PIN_READ_LOGIC+0x48>
 7da:	28 f0       	brcs	.+10     	; 0x7e6 <GPIO_PIN_READ_LOGIC+0x30>
 7dc:	82 30       	cpi	r24, 0x02	; 2
 7de:	d9 f0       	breq	.+54     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	29 f1       	breq	.+74     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7e4:	34 c0       	rjmp	.+104    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
 7e6:	89 b3       	in	r24, 0x19	; 25
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <GPIO_PIN_READ_LOGIC+0x3a>
 7ec:	95 95       	asr	r25
 7ee:	87 95       	ror	r24
 7f0:	2a 95       	dec	r18
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <GPIO_PIN_READ_LOGIC+0x36>
 7f4:	81 70       	andi	r24, 0x01	; 1
 7f6:	fb 01       	movw	r30, r22
 7f8:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
	if((NULL == _pin) || (NULL == pin_status) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
 7fc:	08 95       	ret
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
 7fe:	86 b3       	in	r24, 0x16	; 22
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 804:	95 95       	asr	r25
 806:	87 95       	ror	r24
 808:	2a 95       	dec	r18
 80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	81 70       	andi	r24, 0x01	; 1
 80e:	fb 01       	movw	r30, r22
 810:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 812:	81 e0       	ldi	r24, 0x01	; 1
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
 814:	08 95       	ret
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
 816:	83 b3       	in	r24, 0x13	; 19
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	95 95       	asr	r25
 81e:	87 95       	ror	r24
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 824:	81 70       	andi	r24, 0x01	; 1
 826:	fb 01       	movw	r30, r22
 828:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 82a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
 82c:	08 95       	ret
			case GPIO_PORTD : *pin_status = READ_BIT(PIND, _pin->PIN);	 break;
 82e:	80 b3       	in	r24, 0x10	; 16
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	95 95       	asr	r25
 836:	87 95       	ror	r24
 838:	2a 95       	dec	r18
 83a:	e2 f7       	brpl	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	81 70       	andi	r24, 0x01	; 1
 83e:	fb 01       	movw	r30, r22
 840:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 842:	81 e0       	ldi	r24, 0x01	; 1
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
			case GPIO_PORTD : *pin_status = READ_BIT(PIND, _pin->PIN);	 break;
 844:	08 95       	ret
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (NULL == pin_status) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	08 95       	ret
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
			case GPIO_PORTD : *pin_status = READ_BIT(PIND, _pin->PIN);	 break;
			default:	      	ret = E_NOT_OK;
 84e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 850:	08 95       	ret

00000852 <GPIO_PIN_TOGGLE>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	09 f4       	brne	.+2      	; 0x858 <GPIO_PIN_TOGGLE+0x6>
 856:	41 c0       	rjmp	.+130    	; 0x8da <__stack+0x7b>
 858:	fc 01       	movw	r30, r24
 85a:	20 81       	ld	r18, Z
 85c:	22 95       	swap	r18
 85e:	2f 70       	andi	r18, 0x0F	; 15
 860:	27 70       	andi	r18, 0x07	; 7
 862:	80 81       	ld	r24, Z
 864:	86 95       	lsr	r24
 866:	86 95       	lsr	r24
 868:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	91 f0       	breq	.+36     	; 0x892 <__stack+0x33>
 86e:	28 f0       	brcs	.+10     	; 0x87a <__stack+0x1b>
 870:	82 30       	cpi	r24, 0x02	; 2
 872:	d9 f0       	breq	.+54     	; 0x8aa <__stack+0x4b>
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	29 f1       	breq	.+74     	; 0x8c2 <__stack+0x63>
 878:	32 c0       	rjmp	.+100    	; 0x8de <__stack+0x7f>
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
 87a:	3b b3       	in	r19, 0x1b	; 27
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	2a 95       	dec	r18
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	83 27       	eor	r24, r19
 88c:	8b bb       	out	0x1b, r24	; 27
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 88e:	81 e0       	ldi	r24, 0x01	; 1
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
 890:	08 95       	ret
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
 892:	38 b3       	in	r19, 0x18	; 24
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	2a 95       	dec	r18
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	83 27       	eor	r24, r19
 8a4:	88 bb       	out	0x18, r24	; 24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
 8a8:	08 95       	ret
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
 8aa:	35 b3       	in	r19, 0x15	; 21
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	2a 95       	dec	r18
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	83 27       	eor	r24, r19
 8bc:	85 bb       	out	0x15, r24	; 21
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8be:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
 8c0:	08 95       	ret
			case GPIO_PORTD : TOG_BIT(PORTD, _pin->PIN); break;
 8c2:	32 b3       	in	r19, 0x12	; 18
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	2a 95       	dec	r18
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	83 27       	eor	r24, r19
 8d4:	82 bb       	out	0x12, r24	; 18
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
			case GPIO_PORTD : TOG_BIT(PORTD, _pin->PIN); break;
 8d8:	08 95       	ret
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
			case GPIO_PORTD : TOG_BIT(PORTD, _pin->PIN); break;
			default:	      	ret = E_NOT_OK;
 8de:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 8e0:	08 95       	ret

000008e2 <GPIO_PIN_INIT>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_INIT(const pin_config_t *_pin){
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	59 f0       	breq	.+22     	; 0x900 <GPIO_PIN_INIT+0x1e>
 8ea:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else{
		ret = GPIO_PIN_SET_DIRECTION(_pin, GPIO_DIRECTION_OUTPUT);
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GPIO_PIN_SET_DIRECTION>
		ret = GPIO_PIN_WRITE_LOGIC(_pin, _pin->LOGIC);
 8f2:	68 81       	ld	r22, Y
 8f4:	66 95       	lsr	r22
 8f6:	61 70       	andi	r22, 0x01	; 1
 8f8:	ce 01       	movw	r24, r28
 8fa:	0e 94 56 03 	call	0x6ac	; 0x6ac <GPIO_PIN_WRITE_LOGIC>
 8fe:	01 c0       	rjmp	.+2      	; 0x902 <GPIO_PIN_INIT+0x20>
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_INIT(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 900:	80 e0       	ldi	r24, 0x00	; 0
	else{
		ret = GPIO_PIN_SET_DIRECTION(_pin, GPIO_DIRECTION_OUTPUT);
		ret = GPIO_PIN_WRITE_LOGIC(_pin, _pin->LOGIC);
	}
	return ret;
}
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	08 95       	ret

00000908 <TIMER0_init>:
  * @param  
  * @return
  * @complexity : O(1)
  */
void TIMER0_stop(void){
	TCCR0 = 0;
 908:	62 bf       	out	0x32, r22	; 50
 90a:	83 bf       	out	0x33, r24	; 51
 90c:	08 95       	ret

0000090e <TIMER0_setPreload>:
 90e:	82 bf       	out	0x32, r24	; 50
 910:	08 95       	ret

00000912 <TIMER0_start>:
 912:	ff 92       	push	r15
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
 918:	cf 93       	push	r28
 91a:	df 93       	push	r29
 91c:	8c 01       	movw	r16, r24
 91e:	f6 2e       	mov	r15, r22
 920:	c0 e0       	ldi	r28, 0x00	; 0
 922:	d0 e0       	ldi	r29, 0x00	; 0
 924:	11 c0       	rjmp	.+34     	; 0x948 <TIMER0_start+0x36>
 926:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <exit_flag>
 92a:	81 30       	cpi	r24, 0x01	; 1
 92c:	19 f4       	brne	.+6      	; 0x934 <TIMER0_start+0x22>
 92e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <exit_flag>
 932:	0d c0       	rjmp	.+26     	; 0x94e <TIMER0_start+0x3c>
 934:	08 b6       	in	r0, 0x38	; 56
 936:	00 fe       	sbrs	r0, 0
 938:	fd cf       	rjmp	.-6      	; 0x934 <TIMER0_start+0x22>
 93a:	21 96       	adiw	r28, 0x01	; 1
 93c:	8f 2d       	mov	r24, r15
 93e:	0e 94 87 04 	call	0x90e	; 0x90e <TIMER0_setPreload>
 942:	88 b7       	in	r24, 0x38	; 56
 944:	81 60       	ori	r24, 0x01	; 1
 946:	88 bf       	out	0x38, r24	; 56
 948:	c0 17       	cp	r28, r16
 94a:	d1 07       	cpc	r29, r17
 94c:	64 f3       	brlt	.-40     	; 0x926 <TIMER0_start+0x14>
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	1f 91       	pop	r17
 954:	0f 91       	pop	r16
 956:	ff 90       	pop	r15
 958:	08 95       	ret

0000095a <TIMER0_reset>:
  * @param  
  * @return
  * @complexity : O(1)
  */
void TIMER0_reset(void){
	exit_flag = 1;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <exit_flag>
 960:	08 95       	ret

00000962 <TIMER0_DelayInMilliSec>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
void TIMER0_DelayInMilliSec(int TimeMs){
 962:	8f 92       	push	r8
 964:	9f 92       	push	r9
 966:	af 92       	push	r10
 968:	bf 92       	push	r11
 96a:	cf 92       	push	r12
 96c:	df 92       	push	r13
 96e:	ef 92       	push	r14
 970:	ff 92       	push	r15
 972:	cf 93       	push	r28
	// generate timer delay
	// first calculate number of overflows and preload from given time in ms
	int N = (((float)TimeMs / 1000.0) / (256 * (64.0 / 1000000.0)));
 974:	bc 01       	movw	r22, r24
 976:	99 0f       	add	r25, r25
 978:	88 0b       	sbc	r24, r24
 97a:	99 0b       	sbc	r25, r25
 97c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__floatsisf>
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	4a e7       	ldi	r20, 0x7A	; 122
 986:	54 e4       	ldi	r21, 0x44	; 68
 988:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
 98c:	4b 01       	movw	r8, r22
 98e:	5c 01       	movw	r10, r24
 990:	2d eb       	ldi	r18, 0xBD	; 189
 992:	37 e3       	ldi	r19, 0x37	; 55
 994:	46 e8       	ldi	r20, 0x86	; 134
 996:	5c e3       	ldi	r21, 0x3C	; 60
 998:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
 99c:	0e 94 71 05 	call	0xae2	; 0xae2 <__fixsfsi>
 9a0:	6b 01       	movw	r12, r22
 9a2:	7c 01       	movw	r14, r24
	uint8 preload = 256 - (uint8)((float)(((float)TimeMs / 1000.0) / (256 * (1024.0 / 1000000.0))) / (float)N);
 9a4:	2d eb       	ldi	r18, 0xBD	; 189
 9a6:	37 e3       	ldi	r19, 0x37	; 55
 9a8:	46 e8       	ldi	r20, 0x86	; 134
 9aa:	5e e3       	ldi	r21, 0x3E	; 62
 9ac:	c5 01       	movw	r24, r10
 9ae:	b4 01       	movw	r22, r8
 9b0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
 9b4:	4b 01       	movw	r8, r22
 9b6:	5c 01       	movw	r10, r24
 9b8:	b6 01       	movw	r22, r12
 9ba:	0d 2c       	mov	r0, r13
 9bc:	00 0c       	add	r0, r0
 9be:	88 0b       	sbc	r24, r24
 9c0:	99 0b       	sbc	r25, r25
 9c2:	0e 94 a9 05 	call	0xb52	; 0xb52 <__floatsisf>
 9c6:	9b 01       	movw	r18, r22
 9c8:	ac 01       	movw	r20, r24
 9ca:	c5 01       	movw	r24, r10
 9cc:	b4 01       	movw	r22, r8
 9ce:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__divsf3>
 9d2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixunssfsi>
 9d6:	c6 2f       	mov	r28, r22
 9d8:	c1 95       	neg	r28
	// initialize timer with  prescaler
	TIMER0_init(TIMER_0_PRESCALER_64, preload);
 9da:	6c 2f       	mov	r22, r28
 9dc:	83 e0       	ldi	r24, 0x03	; 3
 9de:	0e 94 84 04 	call	0x908	; 0x908 <TIMER0_init>
	// start timer with given number of overflows and preload value
	TIMER0_start(N, preload);
 9e2:	6c 2f       	mov	r22, r28
 9e4:	c6 01       	movw	r24, r12
 9e6:	0e 94 89 04 	call	0x912	; 0x912 <TIMER0_start>
 9ea:	cf 91       	pop	r28
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	bf 90       	pop	r11
 9f6:	af 90       	pop	r10
 9f8:	9f 90       	pop	r9
 9fa:	8f 90       	pop	r8
 9fc:	08 95       	ret

000009fe <__divsf3>:
 9fe:	0e 94 13 05 	call	0xa26	; 0xa26 <__divsf3x>
 a02:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_round>
 a06:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_pscB>
 a0a:	58 f0       	brcs	.+22     	; 0xa22 <__divsf3+0x24>
 a0c:	0e 94 ed 05 	call	0xbda	; 0xbda <__fp_pscA>
 a10:	40 f0       	brcs	.+16     	; 0xa22 <__divsf3+0x24>
 a12:	29 f4       	brne	.+10     	; 0xa1e <__divsf3+0x20>
 a14:	5f 3f       	cpi	r21, 0xFF	; 255
 a16:	29 f0       	breq	.+10     	; 0xa22 <__divsf3+0x24>
 a18:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_inf>
 a1c:	51 11       	cpse	r21, r1
 a1e:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_szero>
 a22:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_nan>

00000a26 <__divsf3x>:
 a26:	0e 94 0c 06 	call	0xc18	; 0xc18 <__fp_split3>
 a2a:	68 f3       	brcs	.-38     	; 0xa06 <__divsf3+0x8>

00000a2c <__divsf3_pse>:
 a2c:	99 23       	and	r25, r25
 a2e:	b1 f3       	breq	.-20     	; 0xa1c <__divsf3+0x1e>
 a30:	55 23       	and	r21, r21
 a32:	91 f3       	breq	.-28     	; 0xa18 <__divsf3+0x1a>
 a34:	95 1b       	sub	r25, r21
 a36:	55 0b       	sbc	r21, r21
 a38:	bb 27       	eor	r27, r27
 a3a:	aa 27       	eor	r26, r26
 a3c:	62 17       	cp	r22, r18
 a3e:	73 07       	cpc	r23, r19
 a40:	84 07       	cpc	r24, r20
 a42:	38 f0       	brcs	.+14     	; 0xa52 <__divsf3_pse+0x26>
 a44:	9f 5f       	subi	r25, 0xFF	; 255
 a46:	5f 4f       	sbci	r21, 0xFF	; 255
 a48:	22 0f       	add	r18, r18
 a4a:	33 1f       	adc	r19, r19
 a4c:	44 1f       	adc	r20, r20
 a4e:	aa 1f       	adc	r26, r26
 a50:	a9 f3       	breq	.-22     	; 0xa3c <__divsf3_pse+0x10>
 a52:	35 d0       	rcall	.+106    	; 0xabe <__divsf3_pse+0x92>
 a54:	0e 2e       	mov	r0, r30
 a56:	3a f0       	brmi	.+14     	; 0xa66 <__divsf3_pse+0x3a>
 a58:	e0 e8       	ldi	r30, 0x80	; 128
 a5a:	32 d0       	rcall	.+100    	; 0xac0 <__divsf3_pse+0x94>
 a5c:	91 50       	subi	r25, 0x01	; 1
 a5e:	50 40       	sbci	r21, 0x00	; 0
 a60:	e6 95       	lsr	r30
 a62:	00 1c       	adc	r0, r0
 a64:	ca f7       	brpl	.-14     	; 0xa58 <__divsf3_pse+0x2c>
 a66:	2b d0       	rcall	.+86     	; 0xabe <__divsf3_pse+0x92>
 a68:	fe 2f       	mov	r31, r30
 a6a:	29 d0       	rcall	.+82     	; 0xabe <__divsf3_pse+0x92>
 a6c:	66 0f       	add	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	bb 1f       	adc	r27, r27
 a74:	26 17       	cp	r18, r22
 a76:	37 07       	cpc	r19, r23
 a78:	48 07       	cpc	r20, r24
 a7a:	ab 07       	cpc	r26, r27
 a7c:	b0 e8       	ldi	r27, 0x80	; 128
 a7e:	09 f0       	breq	.+2      	; 0xa82 <__divsf3_pse+0x56>
 a80:	bb 0b       	sbc	r27, r27
 a82:	80 2d       	mov	r24, r0
 a84:	bf 01       	movw	r22, r30
 a86:	ff 27       	eor	r31, r31
 a88:	93 58       	subi	r25, 0x83	; 131
 a8a:	5f 4f       	sbci	r21, 0xFF	; 255
 a8c:	3a f0       	brmi	.+14     	; 0xa9c <__divsf3_pse+0x70>
 a8e:	9e 3f       	cpi	r25, 0xFE	; 254
 a90:	51 05       	cpc	r21, r1
 a92:	78 f0       	brcs	.+30     	; 0xab2 <__divsf3_pse+0x86>
 a94:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_inf>
 a98:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_szero>
 a9c:	5f 3f       	cpi	r21, 0xFF	; 255
 a9e:	e4 f3       	brlt	.-8      	; 0xa98 <__divsf3_pse+0x6c>
 aa0:	98 3e       	cpi	r25, 0xE8	; 232
 aa2:	d4 f3       	brlt	.-12     	; 0xa98 <__divsf3_pse+0x6c>
 aa4:	86 95       	lsr	r24
 aa6:	77 95       	ror	r23
 aa8:	67 95       	ror	r22
 aaa:	b7 95       	ror	r27
 aac:	f7 95       	ror	r31
 aae:	9f 5f       	subi	r25, 0xFF	; 255
 ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__divsf3_pse+0x78>
 ab2:	88 0f       	add	r24, r24
 ab4:	91 1d       	adc	r25, r1
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret
 abe:	e1 e0       	ldi	r30, 0x01	; 1
 ac0:	66 0f       	add	r22, r22
 ac2:	77 1f       	adc	r23, r23
 ac4:	88 1f       	adc	r24, r24
 ac6:	bb 1f       	adc	r27, r27
 ac8:	62 17       	cp	r22, r18
 aca:	73 07       	cpc	r23, r19
 acc:	84 07       	cpc	r24, r20
 ace:	ba 07       	cpc	r27, r26
 ad0:	20 f0       	brcs	.+8      	; 0xada <__divsf3_pse+0xae>
 ad2:	62 1b       	sub	r22, r18
 ad4:	73 0b       	sbc	r23, r19
 ad6:	84 0b       	sbc	r24, r20
 ad8:	ba 0b       	sbc	r27, r26
 ada:	ee 1f       	adc	r30, r30
 adc:	88 f7       	brcc	.-30     	; 0xac0 <__divsf3_pse+0x94>
 ade:	e0 95       	com	r30
 ae0:	08 95       	ret

00000ae2 <__fixsfsi>:
 ae2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fixunssfsi>
 ae6:	68 94       	set
 ae8:	b1 11       	cpse	r27, r1
 aea:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_szero>
 aee:	08 95       	ret

00000af0 <__fixunssfsi>:
 af0:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_splitA>
 af4:	88 f0       	brcs	.+34     	; 0xb18 <__fixunssfsi+0x28>
 af6:	9f 57       	subi	r25, 0x7F	; 127
 af8:	98 f0       	brcs	.+38     	; 0xb20 <__fixunssfsi+0x30>
 afa:	b9 2f       	mov	r27, r25
 afc:	99 27       	eor	r25, r25
 afe:	b7 51       	subi	r27, 0x17	; 23
 b00:	b0 f0       	brcs	.+44     	; 0xb2e <__fixunssfsi+0x3e>
 b02:	e1 f0       	breq	.+56     	; 0xb3c <__fixunssfsi+0x4c>
 b04:	66 0f       	add	r22, r22
 b06:	77 1f       	adc	r23, r23
 b08:	88 1f       	adc	r24, r24
 b0a:	99 1f       	adc	r25, r25
 b0c:	1a f0       	brmi	.+6      	; 0xb14 <__fixunssfsi+0x24>
 b0e:	ba 95       	dec	r27
 b10:	c9 f7       	brne	.-14     	; 0xb04 <__fixunssfsi+0x14>
 b12:	14 c0       	rjmp	.+40     	; 0xb3c <__fixunssfsi+0x4c>
 b14:	b1 30       	cpi	r27, 0x01	; 1
 b16:	91 f0       	breq	.+36     	; 0xb3c <__fixunssfsi+0x4c>
 b18:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_zero>
 b1c:	b1 e0       	ldi	r27, 0x01	; 1
 b1e:	08 95       	ret
 b20:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__fp_zero>
 b24:	67 2f       	mov	r22, r23
 b26:	78 2f       	mov	r23, r24
 b28:	88 27       	eor	r24, r24
 b2a:	b8 5f       	subi	r27, 0xF8	; 248
 b2c:	39 f0       	breq	.+14     	; 0xb3c <__fixunssfsi+0x4c>
 b2e:	b9 3f       	cpi	r27, 0xF9	; 249
 b30:	cc f3       	brlt	.-14     	; 0xb24 <__fixunssfsi+0x34>
 b32:	86 95       	lsr	r24
 b34:	77 95       	ror	r23
 b36:	67 95       	ror	r22
 b38:	b3 95       	inc	r27
 b3a:	d9 f7       	brne	.-10     	; 0xb32 <__fixunssfsi+0x42>
 b3c:	3e f4       	brtc	.+14     	; 0xb4c <__fixunssfsi+0x5c>
 b3e:	90 95       	com	r25
 b40:	80 95       	com	r24
 b42:	70 95       	com	r23
 b44:	61 95       	neg	r22
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	8f 4f       	sbci	r24, 0xFF	; 255
 b4a:	9f 4f       	sbci	r25, 0xFF	; 255
 b4c:	08 95       	ret

00000b4e <__floatunsisf>:
 b4e:	e8 94       	clt
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <__floatsisf+0x12>

00000b52 <__floatsisf>:
 b52:	97 fb       	bst	r25, 7
 b54:	3e f4       	brtc	.+14     	; 0xb64 <__floatsisf+0x12>
 b56:	90 95       	com	r25
 b58:	80 95       	com	r24
 b5a:	70 95       	com	r23
 b5c:	61 95       	neg	r22
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	99 23       	and	r25, r25
 b66:	a9 f0       	breq	.+42     	; 0xb92 <__floatsisf+0x40>
 b68:	f9 2f       	mov	r31, r25
 b6a:	96 e9       	ldi	r25, 0x96	; 150
 b6c:	bb 27       	eor	r27, r27
 b6e:	93 95       	inc	r25
 b70:	f6 95       	lsr	r31
 b72:	87 95       	ror	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	b7 95       	ror	r27
 b7a:	f1 11       	cpse	r31, r1
 b7c:	f8 cf       	rjmp	.-16     	; 0xb6e <__floatsisf+0x1c>
 b7e:	fa f4       	brpl	.+62     	; 0xbbe <__floatsisf+0x6c>
 b80:	bb 0f       	add	r27, r27
 b82:	11 f4       	brne	.+4      	; 0xb88 <__floatsisf+0x36>
 b84:	60 ff       	sbrs	r22, 0
 b86:	1b c0       	rjmp	.+54     	; 0xbbe <__floatsisf+0x6c>
 b88:	6f 5f       	subi	r22, 0xFF	; 255
 b8a:	7f 4f       	sbci	r23, 0xFF	; 255
 b8c:	8f 4f       	sbci	r24, 0xFF	; 255
 b8e:	9f 4f       	sbci	r25, 0xFF	; 255
 b90:	16 c0       	rjmp	.+44     	; 0xbbe <__floatsisf+0x6c>
 b92:	88 23       	and	r24, r24
 b94:	11 f0       	breq	.+4      	; 0xb9a <__floatsisf+0x48>
 b96:	96 e9       	ldi	r25, 0x96	; 150
 b98:	11 c0       	rjmp	.+34     	; 0xbbc <__floatsisf+0x6a>
 b9a:	77 23       	and	r23, r23
 b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatsisf+0x54>
 b9e:	9e e8       	ldi	r25, 0x8E	; 142
 ba0:	87 2f       	mov	r24, r23
 ba2:	76 2f       	mov	r23, r22
 ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <__floatsisf+0x5e>
 ba6:	66 23       	and	r22, r22
 ba8:	71 f0       	breq	.+28     	; 0xbc6 <__floatsisf+0x74>
 baa:	96 e8       	ldi	r25, 0x86	; 134
 bac:	86 2f       	mov	r24, r22
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	60 e0       	ldi	r22, 0x00	; 0
 bb2:	2a f0       	brmi	.+10     	; 0xbbe <__floatsisf+0x6c>
 bb4:	9a 95       	dec	r25
 bb6:	66 0f       	add	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	da f7       	brpl	.-10     	; 0xbb4 <__floatsisf+0x62>
 bbe:	88 0f       	add	r24, r24
 bc0:	96 95       	lsr	r25
 bc2:	87 95       	ror	r24
 bc4:	97 f9       	bld	r25, 7
 bc6:	08 95       	ret

00000bc8 <__fp_inf>:
 bc8:	97 f9       	bld	r25, 7
 bca:	9f 67       	ori	r25, 0x7F	; 127
 bcc:	80 e8       	ldi	r24, 0x80	; 128
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	60 e0       	ldi	r22, 0x00	; 0
 bd2:	08 95       	ret

00000bd4 <__fp_nan>:
 bd4:	9f ef       	ldi	r25, 0xFF	; 255
 bd6:	80 ec       	ldi	r24, 0xC0	; 192
 bd8:	08 95       	ret

00000bda <__fp_pscA>:
 bda:	00 24       	eor	r0, r0
 bdc:	0a 94       	dec	r0
 bde:	16 16       	cp	r1, r22
 be0:	17 06       	cpc	r1, r23
 be2:	18 06       	cpc	r1, r24
 be4:	09 06       	cpc	r0, r25
 be6:	08 95       	ret

00000be8 <__fp_pscB>:
 be8:	00 24       	eor	r0, r0
 bea:	0a 94       	dec	r0
 bec:	12 16       	cp	r1, r18
 bee:	13 06       	cpc	r1, r19
 bf0:	14 06       	cpc	r1, r20
 bf2:	05 06       	cpc	r0, r21
 bf4:	08 95       	ret

00000bf6 <__fp_round>:
 bf6:	09 2e       	mov	r0, r25
 bf8:	03 94       	inc	r0
 bfa:	00 0c       	add	r0, r0
 bfc:	11 f4       	brne	.+4      	; 0xc02 <__fp_round+0xc>
 bfe:	88 23       	and	r24, r24
 c00:	52 f0       	brmi	.+20     	; 0xc16 <__fp_round+0x20>
 c02:	bb 0f       	add	r27, r27
 c04:	40 f4       	brcc	.+16     	; 0xc16 <__fp_round+0x20>
 c06:	bf 2b       	or	r27, r31
 c08:	11 f4       	brne	.+4      	; 0xc0e <__fp_round+0x18>
 c0a:	60 ff       	sbrs	r22, 0
 c0c:	04 c0       	rjmp	.+8      	; 0xc16 <__fp_round+0x20>
 c0e:	6f 5f       	subi	r22, 0xFF	; 255
 c10:	7f 4f       	sbci	r23, 0xFF	; 255
 c12:	8f 4f       	sbci	r24, 0xFF	; 255
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	08 95       	ret

00000c18 <__fp_split3>:
 c18:	57 fd       	sbrc	r21, 7
 c1a:	90 58       	subi	r25, 0x80	; 128
 c1c:	44 0f       	add	r20, r20
 c1e:	55 1f       	adc	r21, r21
 c20:	59 f0       	breq	.+22     	; 0xc38 <__fp_splitA+0x10>
 c22:	5f 3f       	cpi	r21, 0xFF	; 255
 c24:	71 f0       	breq	.+28     	; 0xc42 <__fp_splitA+0x1a>
 c26:	47 95       	ror	r20

00000c28 <__fp_splitA>:
 c28:	88 0f       	add	r24, r24
 c2a:	97 fb       	bst	r25, 7
 c2c:	99 1f       	adc	r25, r25
 c2e:	61 f0       	breq	.+24     	; 0xc48 <__fp_splitA+0x20>
 c30:	9f 3f       	cpi	r25, 0xFF	; 255
 c32:	79 f0       	breq	.+30     	; 0xc52 <__fp_splitA+0x2a>
 c34:	87 95       	ror	r24
 c36:	08 95       	ret
 c38:	12 16       	cp	r1, r18
 c3a:	13 06       	cpc	r1, r19
 c3c:	14 06       	cpc	r1, r20
 c3e:	55 1f       	adc	r21, r21
 c40:	f2 cf       	rjmp	.-28     	; 0xc26 <__fp_split3+0xe>
 c42:	46 95       	lsr	r20
 c44:	f1 df       	rcall	.-30     	; 0xc28 <__fp_splitA>
 c46:	08 c0       	rjmp	.+16     	; 0xc58 <__fp_splitA+0x30>
 c48:	16 16       	cp	r1, r22
 c4a:	17 06       	cpc	r1, r23
 c4c:	18 06       	cpc	r1, r24
 c4e:	99 1f       	adc	r25, r25
 c50:	f1 cf       	rjmp	.-30     	; 0xc34 <__fp_splitA+0xc>
 c52:	86 95       	lsr	r24
 c54:	71 05       	cpc	r23, r1
 c56:	61 05       	cpc	r22, r1
 c58:	08 94       	sec
 c5a:	08 95       	ret

00000c5c <__fp_zero>:
 c5c:	e8 94       	clt

00000c5e <__fp_szero>:
 c5e:	bb 27       	eor	r27, r27
 c60:	66 27       	eor	r22, r22
 c62:	77 27       	eor	r23, r23
 c64:	cb 01       	movw	r24, r22
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
