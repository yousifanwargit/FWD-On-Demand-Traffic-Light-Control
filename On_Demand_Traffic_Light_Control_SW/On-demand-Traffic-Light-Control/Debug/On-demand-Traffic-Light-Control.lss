
On-demand-Traffic-Light-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000c80  00000d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  00000d1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c84  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c27  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e7  00000000  00000000  0000382b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00004a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074a  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d85  00000000  00000000  0000559a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000631f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  8a:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:

uint8 val2 = 0;
uint8 val1 = 0;


ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31

	TIMER0_DelayInMilliSec(500);
  b4:	84 ef       	ldi	r24, 0xF4	; 244
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
	GPIO_PIN_READ_LOGIC(&buttonPin, &val2);
  bc:	67 e6       	ldi	r22, 0x67	; 103
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <GPIO_PIN_READ_LOGIC>
	
	if (val2 != val1)
  c8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <val2>
  cc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  d0:	98 13       	cpse	r25, r24
  d2:	3c c0       	rjmp	.+120    	; 0x14c <__vector_1+0xba>
		// long press detected
		// nothing here
		// return immediately to continue normal mode
		//return;
	}
	else if (val2 == val1)
  d4:	98 13       	cpse	r25, r24
  d6:	3a c0       	rjmp	.+116    	; 0x14c <__vector_1+0xba>
	{
		// there is on long press
		// check for current state (cars)
		uint8 currentMode = TrafficLights_CurrentMode();
  d8:	0e 94 a9 01 	call	0x352	; 0x352 <TrafficLights_CurrentMode>
		if (currentMode == CARS_MODE_GREEN || currentMode == CARS_MODE_YELLOW)
  dc:	81 50       	subi	r24, 0x01	; 1
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	e8 f4       	brcc	.+58     	; 0x11c <__vector_1+0x8a>
		{
			
			// if cars state is green or yellow
			/********************************************/
			// turn peds red on
			PedsRedEnable();
  e2:	0e 94 9b 01 	call	0x336	; 0x336 <PedsRedEnable>
			//turn car green off
			CarsGreenDisable();
  e6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <CarsGreenDisable>
			// blink yellow for 5 secs
			Cars_Peds_Yellow_Blinking();
  ea:	0e 94 bf 01 	call	0x37e	; 0x37e <Cars_Peds_Yellow_Blinking>
			// turn  peds red off and turn peds green on
			PedsRedDisable();
  ee:	0e 94 a2 01 	call	0x344	; 0x344 <PedsRedDisable>
			PedsGreenEnable();
  f2:	0e 94 84 01 	call	0x308	; 0x308 <PedsGreenEnable>
			// turn cars red on and turn cars green off
			CarsRedEnable();
  f6:	0e 94 8b 01 	call	0x316	; 0x316 <CarsRedEnable>
			CarsGreenDisable();
  fa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <CarsGreenDisable>
			// wait for 5 secs
			TIMER0_DelayInMilliSec(5000);
  fe:	88 e8       	ldi	r24, 0x88	; 136
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
			//turn car red off
			CarsRedDisable();
 106:	0e 94 94 01 	call	0x328	; 0x328 <CarsRedDisable>
			// blink both yellow leds for 5 secs
			Cars_Peds_Yellow_Blinking();
 10a:	0e 94 bf 01 	call	0x37e	; 0x37e <Cars_Peds_Yellow_Blinking>
			/********************************************/
			// turn all leds of
			TurnAllOff();
 10e:	0e 94 41 02 	call	0x482	; 0x482 <TurnAllOff>
			// reset timer to escape after return
			TIMER0_reset();
 112:	0e 94 b6 04 	call	0x96c	; 0x96c <TIMER0_reset>
			// reset normal mode to beginning
			ResetNormalMode();
 116:	0e 94 66 02 	call	0x4cc	; 0x4cc <ResetNormalMode>
 11a:	18 c0       	rjmp	.+48     	; 0x14c <__vector_1+0xba>
			/********************************************/
		}
		else if (TrafficLights_CurrentMode() == CARS_MODE_RED)
 11c:	0e 94 a9 01 	call	0x352	; 0x352 <TrafficLights_CurrentMode>
 120:	81 11       	cpse	r24, r1
 122:	14 c0       	rjmp	.+40     	; 0x14c <__vector_1+0xba>
		{
			// if cars state is  red
			/********************************************/
			//turn peds green on
			PedsGreenEnable();
 124:	0e 94 84 01 	call	0x308	; 0x308 <PedsGreenEnable>
			// turn cars red on and turn cars green off
			CarsRedEnable();
 128:	0e 94 8b 01 	call	0x316	; 0x316 <CarsRedEnable>
			CarsGreenDisable();
 12c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <CarsGreenDisable>
			// wait for 5 secs
			TIMER0_DelayInMilliSec(5000);
 130:	88 e8       	ldi	r24, 0x88	; 136
 132:	93 e1       	ldi	r25, 0x13	; 19
 134:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
			//turn cars red off
			CarsRedDisable();
 138:	0e 94 94 01 	call	0x328	; 0x328 <CarsRedDisable>
			// blink both yellow while peds green on
			Cars_Peds_Yellow_Blinking();
 13c:	0e 94 bf 01 	call	0x37e	; 0x37e <Cars_Peds_Yellow_Blinking>
			/********************************************/
			// turn off all leds
			TurnAllOff();
 140:	0e 94 41 02 	call	0x482	; 0x482 <TurnAllOff>
			// reset timer to escape after return
			TIMER0_reset();
 144:	0e 94 b6 04 	call	0x96c	; 0x96c <TIMER0_reset>
			// reset normal mode to beginning
			ResetNormalMode();
 148:	0e 94 66 02 	call	0x4cc	; 0x4cc <ResetNormalMode>
		}
	}
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <appInit>:

void appInit(void){
	// initialize external interrupt 0
	EXT_INT_init(INT0, FALLING_EDGE);
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 77 02 	call	0x4ee	; 0x4ee <EXT_INT_init>

	// initialize traffic lights module
	All_Lights_init();
 176:	0e 94 4e 01 	call	0x29c	; 0x29c <All_Lights_init>
 17a:	08 95       	ret

0000017c <appStart>:
}
void appStart(void){
	// enable external interrupt 0
	EXT_INT_enable(INT0);
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	0e 94 c1 02 	call	0x582	; 0x582 <EXT_INT_enable>
	// call normal mode function
	LIGHTS_NormalMode();
 182:	0e 94 03 02 	call	0x406	; 0x406 <LIGHTS_NormalMode>
 186:	08 95       	ret

00000188 <led_init>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_init(const led_t *_led){
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	1f 92       	push	r1
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	b1 f0       	breq	.+44     	; 0x1c2 <led_init+0x3a>
 196:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 198:	80 81       	ld	r24, Z
 19a:	28 2f       	mov	r18, r24
 19c:	26 95       	lsr	r18
 19e:	26 95       	lsr	r18
 1a0:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1a2:	23 70       	andi	r18, 0x03	; 3
 1a4:	22 0f       	add	r18, r18
 1a6:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 1a8:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1aa:	98 2f       	mov	r25, r24
 1ac:	92 95       	swap	r25
 1ae:	90 7f       	andi	r25, 0xF0	; 240
 1b0:	82 2f       	mov	r24, r18
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	89 2b       	or	r24, r25
 1b6:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_INIT(&pin);
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <GPIO_PIN_INIT>
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <led_init+0x3c>
  * @complexity : O(1)
  */
Std_ReturnType led_init(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_INIT(&pin);
	}
	return ret;
}
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <led_turn_on>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_turn_on(const led_t *_led){
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	1f 92       	push	r1
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	b9 f0       	breq	.+46     	; 0x208 <led_turn_on+0x3c>
 1da:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 1dc:	80 81       	ld	r24, Z
 1de:	28 2f       	mov	r18, r24
 1e0:	26 95       	lsr	r18
 1e2:	26 95       	lsr	r18
 1e4:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1e6:	23 70       	andi	r18, 0x03	; 3
 1e8:	22 0f       	add	r18, r18
 1ea:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 1ec:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 1ee:	98 2f       	mov	r25, r24
 1f0:	92 95       	swap	r25
 1f2:	90 7f       	andi	r25, 0xF0	; 240
 1f4:	82 2f       	mov	r24, r18
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	89 2b       	or	r24, r25
 1fa:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_HIGH);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 5f 03 	call	0x6be	; 0x6be <GPIO_PIN_WRITE_LOGIC>
 206:	01 c0       	rjmp	.+2      	; 0x20a <led_turn_on+0x3e>
  * @complexity : O(1)
  */
Std_ReturnType led_turn_on(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 208:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_HIGH);
	}
	return ret;
}
 20a:	0f 90       	pop	r0
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <led_turn_off>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_turn_off(const led_t *_led){
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	b9 f0       	breq	.+46     	; 0x24e <led_turn_off+0x3c>
 220:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 222:	80 81       	ld	r24, Z
 224:	28 2f       	mov	r18, r24
 226:	26 95       	lsr	r18
 228:	26 95       	lsr	r18
 22a:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 22c:	23 70       	andi	r18, 0x03	; 3
 22e:	22 0f       	add	r18, r18
 230:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 232:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 234:	98 2f       	mov	r25, r24
 236:	92 95       	swap	r25
 238:	90 7f       	andi	r25, 0xF0	; 240
 23a:	82 2f       	mov	r24, r18
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	89 2b       	or	r24, r25
 240:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_LOW);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	0e 94 5f 03 	call	0x6be	; 0x6be <GPIO_PIN_WRITE_LOGIC>
 24c:	01 c0       	rjmp	.+2      	; 0x250 <led_turn_off+0x3e>
  * @complexity : O(1)
  */
Std_ReturnType led_turn_off(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 24e:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_WRITE_LOGIC(&pin, GPIO_LOGIC_LOW);
	}
	return ret;
}
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <led_tog>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType led_tog(const led_t *_led){
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	1f 92       	push	r1
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	b1 f0       	breq	.+44     	; 0x292 <led_tog+0x3a>
 266:	fc 01       	movw	r30, r24
	else{
		pin_config_t pin = {
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
 268:	80 81       	ld	r24, Z
 26a:	28 2f       	mov	r18, r24
 26c:	26 95       	lsr	r18
 26e:	26 95       	lsr	r18
 270:	26 95       	lsr	r18
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 272:	23 70       	andi	r18, 0x03	; 3
 274:	22 0f       	add	r18, r18
 276:	22 0f       	add	r18, r18
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
 278:	87 70       	andi	r24, 0x07	; 7
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
	}
	else{
		pin_config_t pin = {
 27a:	98 2f       	mov	r25, r24
 27c:	92 95       	swap	r25
 27e:	90 7f       	andi	r25, 0xF0	; 240
 280:	82 2f       	mov	r24, r18
 282:	81 60       	ori	r24, 0x01	; 1
 284:	89 2b       	or	r24, r25
 286:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_OUTPUT,
			.LOGIC = GPIO_LOGIC_LOW,
			.PIN = _led->pin,
			.PORT = _led->port
		};
		ret = GPIO_PIN_TOGGLE(&pin);
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	0e 94 32 04 	call	0x864	; 0x864 <GPIO_PIN_TOGGLE>
 290:	01 c0       	rjmp	.+2      	; 0x294 <led_tog+0x3c>
  * @complexity : O(1)
  */
Std_ReturnType led_tog(const led_t *_led){
	Std_ReturnType ret = E_OK;
	if (NULL == _led){
		ret = E_NOT_OK;
 292:	80 e0       	ldi	r24, 0x00	; 0
			.PORT = _led->port
		};
		ret = GPIO_PIN_TOGGLE(&pin);
	}
	return ret;
}
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <All_Lights_init>:
}
void PedsGreenEnable(void){
	ret = led_turn_on(&peds_green);
}
void PedsGreenDisable(void){
	ret = led_turn_off(&peds_green);
 29c:	85 e6       	ldi	r24, 0x65	; 101
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
 2a4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2a8:	84 e6       	ldi	r24, 0x64	; 100
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
 2b0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2b4:	88 e6       	ldi	r24, 0x68	; 104
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
 2bc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2c0:	83 e6       	ldi	r24, 0x63	; 99
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
 2c8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2cc:	82 e6       	ldi	r24, 0x62	; 98
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
 2d4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2d8:	81 e6       	ldi	r24, 0x61	; 97
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 c4 00 	call	0x188	; 0x188 <led_init>
 2e0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2e4:	08 95       	ret

000002e6 <CarsGreenEnable>:
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cars_mode>
 2ec:	88 e6       	ldi	r24, 0x68	; 104
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <led_turn_on>
 2f4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 2f8:	08 95       	ret

000002fa <CarsGreenDisable>:
 2fa:	88 e6       	ldi	r24, 0x68	; 104
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 302:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 306:	08 95       	ret

00000308 <PedsGreenEnable>:
 308:	81 e6       	ldi	r24, 0x61	; 97
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <led_turn_on>
 310:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 314:	08 95       	ret

00000316 <CarsRedEnable>:
	}
	// turn of cars yellow
	led_turn_off(&cars_yellow);
}
void CarsRedEnable(void){
	cars_mode = CARS_MODE_RED;
 316:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <cars_mode>
	ret = led_turn_on(&cars_red);
 31a:	85 e6       	ldi	r24, 0x65	; 101
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <led_turn_on>
 322:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 326:	08 95       	ret

00000328 <CarsRedDisable>:
}
void CarsRedDisable(void){
	ret = led_turn_off(&cars_red);
 328:	85 e6       	ldi	r24, 0x65	; 101
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 330:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 334:	08 95       	ret

00000336 <PedsRedEnable>:
}
void PedsRedEnable(void){
	ret = led_turn_on(&peds_red);
 336:	83 e6       	ldi	r24, 0x63	; 99
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <led_turn_on>
 33e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 342:	08 95       	ret

00000344 <PedsRedDisable>:
}
void PedsRedDisable(void){
	ret = led_turn_off(&peds_red);
 344:	83 e6       	ldi	r24, 0x63	; 99
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 34c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 350:	08 95       	ret

00000352 <TrafficLights_CurrentMode>:
}
uint8 TrafficLights_CurrentMode(void){
	return cars_mode;
}
 352:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <cars_mode>
 356:	08 95       	ret

00000358 <TurnCarsOff>:
void TurnCarsOff(void){
	ret = led_turn_off(&cars_red);
 358:	85 e6       	ldi	r24, 0x65	; 101
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 360:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&cars_yellow);
 364:	84 e6       	ldi	r24, 0x64	; 100
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 36c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&cars_green);
 370:	88 e6       	ldi	r24, 0x68	; 104
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 378:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 37c:	08 95       	ret

0000037e <Cars_Peds_Yellow_Blinking>:
	ret = led_turn_on(&peds_green);
}
void PedsGreenDisable(void){
	ret = led_turn_off(&peds_green);
}
void Cars_Peds_Yellow_Blinking(void){
 37e:	cf 93       	push	r28
	// define variable to be iterator
	uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cars_mode>
	for (i = 1; i <= 10; i++)
 386:	c1 e0       	ldi	r28, 0x01	; 1
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <Cars_Peds_Yellow_Blinking+0x34>
	{
		// check for reset
		if (reset_flag == 1)
 38a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	19 f4       	brne	.+6      	; 0x398 <Cars_Peds_Yellow_Blinking+0x1a>
		{
			TurnCarsOff();
 392:	0e 94 ac 01 	call	0x358	; 0x358 <TurnCarsOff>
			return;
 396:	17 c0       	rjmp	.+46     	; 0x3c6 <Cars_Peds_Yellow_Blinking+0x48>
		}
		// toggle cars yellow
		led_tog(&cars_yellow);
 398:	84 e6       	ldi	r24, 0x64	; 100
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 2c 01 	call	0x258	; 0x258 <led_tog>
		led_tog(&peds_yellow);
 3a0:	82 e6       	ldi	r24, 0x62	; 98
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 2c 01 	call	0x258	; 0x258 <led_tog>
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
 3a8:	84 ef       	ldi	r24, 0xF4	; 244
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
void Cars_Peds_Yellow_Blinking(void){
	// define variable to be iterator
	uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
	for (i = 1; i <= 10; i++)
 3b0:	cf 5f       	subi	r28, 0xFF	; 255
 3b2:	cb 30       	cpi	r28, 0x0B	; 11
 3b4:	50 f3       	brcs	.-44     	; 0x38a <Cars_Peds_Yellow_Blinking+0xc>
		led_tog(&peds_yellow);
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
	}
	// turn of cars yellow
	led_turn_off(&cars_yellow);
 3b6:	84 e6       	ldi	r24, 0x64	; 100
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
	led_turn_off(&peds_yellow);
 3be:	82 e6       	ldi	r24, 0x62	; 98
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
}
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <CarsYellowBlinking>:
void CarsYellowBlinking(void){
 3ca:	cf 93       	push	r28
	// define variable to be iterator
	 uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <cars_mode>
	for (i = 1; i <= 10; i++)
 3d2:	c1 e0       	ldi	r28, 0x01	; 1
 3d4:	10 c0       	rjmp	.+32     	; 0x3f6 <CarsYellowBlinking+0x2c>
	{
		// check for reset
		if (reset_flag == 1)
 3d6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <CarsYellowBlinking+0x1a>
		{
			TurnCarsOff();
 3de:	0e 94 ac 01 	call	0x358	; 0x358 <TurnCarsOff>
			return;
 3e2:	0f c0       	rjmp	.+30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		}
		// toggle cars yellow
		led_tog(&cars_yellow);
 3e4:	84 e6       	ldi	r24, 0x64	; 100
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 2c 01 	call	0x258	; 0x258 <led_tog>
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
 3ec:	84 ef       	ldi	r24, 0xF4	; 244
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
void CarsYellowBlinking(void){
	// define variable to be iterator
	 uint8 i;
	// set cars state to yellow state
	cars_mode = CARS_MODE_YELLOW;
	for (i = 1; i <= 10; i++)
 3f4:	cf 5f       	subi	r28, 0xFF	; 255
 3f6:	cb 30       	cpi	r28, 0x0B	; 11
 3f8:	70 f3       	brcs	.-36     	; 0x3d6 <CarsYellowBlinking+0xc>
		led_tog(&cars_yellow);
		// delay for half secs
		TIMER0_DelayInMilliSec(500);
	}
	// turn of cars yellow
	led_turn_off(&cars_yellow);
 3fa:	84 e6       	ldi	r24, 0x64	; 100
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
}
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <LIGHTS_NormalMode>:
	ret = led_init(&peds_yellow);
	ret = led_init(&peds_green);
}
void LIGHTS_NormalMode(void){
	
	while (reset_flag == 0)
 406:	38 c0       	rjmp	.+112    	; 0x478 <LIGHTS_NormalMode+0x72>
		{
		// turn cars green on
		CarsGreenEnable();
 408:	0e 94 73 01 	call	0x2e6	; 0x2e6 <CarsGreenEnable>
		// wait for 5 secs then check for reset
		TIMER0_DelayInMilliSec(5000);
 40c:	88 e8       	ldi	r24, 0x88	; 136
 40e:	93 e1       	ldi	r25, 0x13	; 19
 410:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
		if (reset_flag == 1)
 414:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	29 f4       	brne	.+10     	; 0x426 <LIGHTS_NormalMode+0x20>
		{
			TurnCarsOff();
 41c:	0e 94 ac 01 	call	0x358	; 0x358 <TurnCarsOff>
			reset_flag = 0;
 420:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <reset_flag>
			break;
 424:	08 95       	ret
		}
		// turn cars green off
		CarsGreenDisable();
 426:	0e 94 7d 01 	call	0x2fa	; 0x2fa <CarsGreenDisable>
		// blink cars yellow for 5 secs
		CarsYellowBlinking();
 42a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <CarsYellowBlinking>
		// check for reset
		if (reset_flag == 1)
 42e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	29 f4       	brne	.+10     	; 0x440 <LIGHTS_NormalMode+0x3a>
		{
			TurnCarsOff();
 436:	0e 94 ac 01 	call	0x358	; 0x358 <TurnCarsOff>
			reset_flag = 0;
 43a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <reset_flag>
			break;
 43e:	08 95       	ret
		}
		// turn cars red on
		CarsRedEnable();
 440:	0e 94 8b 01 	call	0x316	; 0x316 <CarsRedEnable>
		// wait for 5 secs then check for reset
		TIMER0_DelayInMilliSec(5000);
 444:	88 e8       	ldi	r24, 0x88	; 136
 446:	93 e1       	ldi	r25, 0x13	; 19
 448:	0e 94 ba 04 	call	0x974	; 0x974 <TIMER0_DelayInMilliSec>
		if (reset_flag == 1)
 44c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	29 f4       	brne	.+10     	; 0x45e <LIGHTS_NormalMode+0x58>
		{
			TurnCarsOff();
 454:	0e 94 ac 01 	call	0x358	; 0x358 <TurnCarsOff>
			reset_flag = 0;
 458:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <reset_flag>
			break;
 45c:	08 95       	ret
		}
		// turn cars red off
		CarsRedDisable();
 45e:	0e 94 94 01 	call	0x328	; 0x328 <CarsRedDisable>
		// blink cars yellow for  secs
		CarsYellowBlinking();
 462:	0e 94 e5 01 	call	0x3ca	; 0x3ca <CarsYellowBlinking>
		// check for reset
		if (reset_flag == 1)
 466:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	29 f4       	brne	.+10     	; 0x478 <LIGHTS_NormalMode+0x72>
		{
			TurnCarsOff();
 46e:	0e 94 ac 01 	call	0x358	; 0x358 <TurnCarsOff>
			reset_flag = 0;
 472:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <reset_flag>
			break;
 476:	08 95       	ret
	ret = led_init(&peds_yellow);
	ret = led_init(&peds_green);
}
void LIGHTS_NormalMode(void){
	
	while (reset_flag == 0)
 478:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <reset_flag>
 47c:	88 23       	and	r24, r24
 47e:	21 f2       	breq	.-120    	; 0x408 <LIGHTS_NormalMode+0x2>
 480:	08 95       	ret

00000482 <TurnAllOff>:
	ret = led_turn_off(&cars_red);
	ret = led_turn_off(&cars_yellow);
	ret = led_turn_off(&cars_green);
}
void TurnAllOff(void){
	ret = led_turn_off(&cars_red);
 482:	85 e6       	ldi	r24, 0x65	; 101
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 48a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&cars_yellow);
 48e:	84 e6       	ldi	r24, 0x64	; 100
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 496:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&cars_green);
 49a:	88 e6       	ldi	r24, 0x68	; 104
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 4a2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&peds_red);
 4a6:	83 e6       	ldi	r24, 0x63	; 99
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 4ae:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&peds_yellow);
 4b2:	82 e6       	ldi	r24, 0x62	; 98
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 4ba:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
	ret = led_turn_off(&peds_green);
 4be:	81 e6       	ldi	r24, 0x61	; 97
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 09 01 	call	0x212	; 0x212 <led_turn_off>
 4c6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
 4ca:	08 95       	ret

000004cc <ResetNormalMode>:
}
void ResetNormalMode(void){
	reset_flag = 1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <reset_flag>
 4d2:	08 95       	ret

000004d4 <main>:
int main(void)
{
			//ret = led_init(&led0);
			//EXT_INT_enable(INT_0);
			//All_Lights_init();
			appInit();
 4d4:	0e 94 b7 00 	call	0x16e	; 0x16e <appInit>
		//TIMER0_DelayInMilliSec(1000);
		//ret = led_turn_off(&led0);
		//TIMER0_DelayInMilliSec(1000);
		//LIGHTS_NormalMode();
		
		ret = GPIO_PIN_READ_LOGIC(&buttonPin, &val1);	
 4d8:	66 e6       	ldi	r22, 0x66	; 102
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e6       	ldi	r24, 0x60	; 96
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <GPIO_PIN_READ_LOGIC>
 4e4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ret>
		appStart();
 4e8:	0e 94 be 00 	call	0x17c	; 0x17c <appStart>
 4ec:	f5 cf       	rjmp	.-22     	; 0x4d8 <main+0x4>

000004ee <EXT_INT_init>:
 */ 


#include "ext_int.h"

void EXT_INT_init(uint8 interupt, uint8 signal_type){
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	1f 92       	push	r1
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	16 2f       	mov	r17, r22
	
	SET_BIT(SREG, 7);
 500:	9f b7       	in	r25, 0x3f	; 63
 502:	90 68       	ori	r25, 0x80	; 128
 504:	9f bf       	out	0x3f, r25	; 63
	//select and enable chosen interrupt with chosen sense control
	//and initialize its corresponding pin
	switch (interupt)
 506:	86 30       	cpi	r24, 0x06	; 6
 508:	29 f0       	breq	.+10     	; 0x514 <EXT_INT_init+0x26>
 50a:	87 30       	cpi	r24, 0x07	; 7
 50c:	71 f0       	breq	.+28     	; 0x52a <EXT_INT_init+0x3c>
 50e:	85 30       	cpi	r24, 0x05	; 5
 510:	89 f5       	brne	.+98     	; 0x574 <EXT_INT_init+0x86>
 512:	18 c0       	rjmp	.+48     	; 0x544 <EXT_INT_init+0x56>
	{
		case INT0: ;
			pin_config_t pin_int_0 = {
 514:	8e e2       	ldi	r24, 0x2E	; 46
 516:	89 83       	std	Y+1, r24	; 0x01
			};
		if (signal_type == FALLING_EDGE)
		{
			pin_int_0.LOGIC = GPIO_LOGIC_HIGH;
		}
		GPIO_PIN_INIT(&pin_int_0);
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <GPIO_PIN_INIT>
		MCUCR = signal_type;
 520:	15 bf       	out	0x35, r17	; 53
		SET_BIT(GICR, 6);
 522:	8b b7       	in	r24, 0x3b	; 59
 524:	80 64       	ori	r24, 0x40	; 64
 526:	8b bf       	out	0x3b, r24	; 59
		break;
 528:	25 c0       	rjmp	.+74     	; 0x574 <EXT_INT_init+0x86>
		case INT1: ;
			pin_config_t pin_int_1 = {
 52a:	8e e3       	ldi	r24, 0x3E	; 62
 52c:	89 83       	std	Y+1, r24	; 0x01
			};
		if (signal_type == FALLING_EDGE)
		{
			pin_int_1.LOGIC = GPIO_LOGIC_HIGH;
		}
		GPIO_PIN_INIT(&pin_int_1);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <GPIO_PIN_INIT>
		MCUCR = (signal_type << 2);
 536:	11 0f       	add	r17, r17
 538:	11 0f       	add	r17, r17
 53a:	15 bf       	out	0x35, r17	; 53
		SET_BIT(GICR, 7);
 53c:	8b b7       	in	r24, 0x3b	; 59
 53e:	80 68       	ori	r24, 0x80	; 128
 540:	8b bf       	out	0x3b, r24	; 59
		break;
 542:	18 c0       	rjmp	.+48     	; 0x574 <EXT_INT_init+0x86>
		case INT2: ;
			pin_config_t pin_int_2 = {
 544:	86 e2       	ldi	r24, 0x26	; 38
 546:	89 83       	std	Y+1, r24	; 0x01
			.DIRECTION = GPIO_DIRECTION_INPUT,
			.PIN = GPIO_PIN2,
			.PORT = GPIO_PORTB,
			.LOGIC = GPIO_LOGIC_HIGH
			};
		GPIO_PIN_INIT(&pin_int_2);
 548:	ce 01       	movw	r24, r28
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <GPIO_PIN_INIT>
		MCUCSR |= ((signal_type & 0x01) << 6);
 550:	84 b7       	in	r24, 0x34	; 52
 552:	10 fb       	bst	r17, 0
 554:	ee 24       	eor	r14, r14
 556:	e0 f8       	bld	r14, 0
 558:	f1 2c       	mov	r15, r1
 55a:	00 24       	eor	r0, r0
 55c:	f6 94       	lsr	r15
 55e:	e7 94       	ror	r14
 560:	07 94       	ror	r0
 562:	f6 94       	lsr	r15
 564:	e7 94       	ror	r14
 566:	07 94       	ror	r0
 568:	fe 2c       	mov	r15, r14
 56a:	e0 2c       	mov	r14, r0
 56c:	e8 2a       	or	r14, r24
 56e:	e4 be       	out	0x34, r14	; 52
		SET_BIT(GICR, 8);
 570:	8b b7       	in	r24, 0x3b	; 59
 572:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	08 95       	ret

00000582 <EXT_INT_enable>:
void EXT_INT_enable(uint8 interupt){
	if (INT_0 == interupt){
 582:	81 11       	cpse	r24, r1
 584:	07 c0       	rjmp	.+14     	; 0x594 <EXT_INT_enable+0x12>
		SET_BIT(SREG, 7);
 586:	8f b7       	in	r24, 0x3f	; 63
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(GICR, 6);
 58c:	8b b7       	in	r24, 0x3b	; 59
 58e:	80 64       	ori	r24, 0x40	; 64
 590:	8b bf       	out	0x3b, r24	; 59
 592:	08 95       	ret
	} 
	else if (INT_1 == interupt){
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	31 f4       	brne	.+12     	; 0x5a4 <EXT_INT_enable+0x22>
		SET_BIT(SREG, 7);
 598:	8f b7       	in	r24, 0x3f	; 63
 59a:	80 68       	ori	r24, 0x80	; 128
 59c:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(GICR, 8);
 59e:	8b b7       	in	r24, 0x3b	; 59
 5a0:	8b bf       	out	0x3b, r24	; 59
 5a2:	08 95       	ret
	}
	else if(INT_2 == interupt){
 5a4:	82 30       	cpi	r24, 0x02	; 2
 5a6:	29 f4       	brne	.+10     	; 0x5b2 <EXT_INT_enable+0x30>
		SET_BIT(SREG, 7);
 5a8:	8f b7       	in	r24, 0x3f	; 63
 5aa:	80 68       	ori	r24, 0x80	; 128
 5ac:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(GICR, 9);
 5ae:	8b b7       	in	r24, 0x3b	; 59
 5b0:	8b bf       	out	0x3b, r24	; 59
 5b2:	08 95       	ret

000005b4 <GPIO_PIN_SET_DIRECTION>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	09 f4       	brne	.+2      	; 0x5ba <GPIO_PIN_SET_DIRECTION+0x6>
 5b8:	7e c0       	rjmp	.+252    	; 0x6b6 <GPIO_PIN_SET_DIRECTION+0x102>
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 81       	ld	r18, Z
 5be:	22 95       	swap	r18
 5c0:	2f 70       	andi	r18, 0x0F	; 15
 5c2:	27 70       	andi	r18, 0x07	; 7
 5c4:	80 81       	ld	r24, Z
 5c6:	86 95       	lsr	r24
 5c8:	86 95       	lsr	r24
 5ca:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	11 f1       	breq	.+68     	; 0x614 <GPIO_PIN_SET_DIRECTION+0x60>
 5d0:	30 f0       	brcs	.+12     	; 0x5de <GPIO_PIN_SET_DIRECTION+0x2a>
 5d2:	82 30       	cpi	r24, 0x02	; 2
 5d4:	d1 f1       	breq	.+116    	; 0x64a <GPIO_PIN_SET_DIRECTION+0x96>
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	09 f4       	brne	.+2      	; 0x5dc <GPIO_PIN_SET_DIRECTION+0x28>
 5da:	52 c0       	rjmp	.+164    	; 0x680 <GPIO_PIN_SET_DIRECTION+0xcc>
 5dc:	6e c0       	rjmp	.+220    	; 0x6ba <GPIO_PIN_SET_DIRECTION+0x106>
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
 5de:	61 30       	cpi	r22, 0x01	; 1
 5e0:	61 f4       	brne	.+24     	; 0x5fa <GPIO_PIN_SET_DIRECTION+0x46>
 5e2:	3a b3       	in	r19, 0x1a	; 26
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <GPIO_PIN_SET_DIRECTION+0x3a>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	2a 95       	dec	r18
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <GPIO_PIN_SET_DIRECTION+0x36>
 5f2:	83 2b       	or	r24, r19
 5f4:	8a bb       	out	0x1a, r24	; 26
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
 5fa:	3a b3       	in	r19, 0x1a	; 26
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <GPIO_PIN_SET_DIRECTION+0x52>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	2a 95       	dec	r18
 608:	e2 f7       	brpl	.-8      	; 0x602 <GPIO_PIN_SET_DIRECTION+0x4e>
 60a:	80 95       	com	r24
 60c:	83 23       	and	r24, r19
 60e:	8a bb       	out	0x1a, r24	; 26
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
 614:	61 30       	cpi	r22, 0x01	; 1
 616:	61 f4       	brne	.+24     	; 0x630 <GPIO_PIN_SET_DIRECTION+0x7c>
 618:	37 b3       	in	r19, 0x17	; 23
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <GPIO_PIN_SET_DIRECTION+0x70>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	2a 95       	dec	r18
 626:	e2 f7       	brpl	.-8      	; 0x620 <GPIO_PIN_SET_DIRECTION+0x6c>
 628:	83 2b       	or	r24, r19
 62a:	87 bb       	out	0x17, r24	; 23
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
 630:	37 b3       	in	r19, 0x17	; 23
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <GPIO_PIN_SET_DIRECTION+0x88>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	2a 95       	dec	r18
 63e:	e2 f7       	brpl	.-8      	; 0x638 <GPIO_PIN_SET_DIRECTION+0x84>
 640:	80 95       	com	r24
 642:	83 23       	and	r24, r19
 644:	87 bb       	out	0x17, r24	; 23
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
 64a:	61 30       	cpi	r22, 0x01	; 1
 64c:	61 f4       	brne	.+24     	; 0x666 <GPIO_PIN_SET_DIRECTION+0xb2>
 64e:	34 b3       	in	r19, 0x14	; 20
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <GPIO_PIN_SET_DIRECTION+0xa6>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	2a 95       	dec	r18
 65c:	e2 f7       	brpl	.-8      	; 0x656 <GPIO_PIN_SET_DIRECTION+0xa2>
 65e:	83 2b       	or	r24, r19
 660:	84 bb       	out	0x14, r24	; 20
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
 666:	34 b3       	in	r19, 0x14	; 20
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <GPIO_PIN_SET_DIRECTION+0xbe>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	2a 95       	dec	r18
 674:	e2 f7       	brpl	.-8      	; 0x66e <GPIO_PIN_SET_DIRECTION+0xba>
 676:	80 95       	com	r24
 678:	83 23       	and	r24, r19
 67a:	84 bb       	out	0x14, r24	; 20
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRD, _pin->PIN);} else{CLEAR_BIT(DDRD, _pin->PIN);} break;
 680:	61 30       	cpi	r22, 0x01	; 1
 682:	61 f4       	brne	.+24     	; 0x69c <GPIO_PIN_SET_DIRECTION+0xe8>
 684:	31 b3       	in	r19, 0x11	; 17
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <GPIO_PIN_SET_DIRECTION+0xdc>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	2a 95       	dec	r18
 692:	e2 f7       	brpl	.-8      	; 0x68c <GPIO_PIN_SET_DIRECTION+0xd8>
 694:	83 2b       	or	r24, r19
 696:	81 bb       	out	0x11, r24	; 17
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRD, _pin->PIN);} else{CLEAR_BIT(DDRD, _pin->PIN);} break;
 69c:	31 b3       	in	r19, 0x11	; 17
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <GPIO_PIN_SET_DIRECTION+0xf4>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	2a 95       	dec	r18
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <GPIO_PIN_SET_DIRECTION+0xf0>
 6ac:	80 95       	com	r24
 6ae:	83 23       	and	r24, r19
 6b0:	81 bb       	out	0x11, r24	; 17
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_SET_DIRECTION(const pin_config_t *_pin, uint8 direction_config){
	Std_ReturnType ret = E_OK;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRA, _pin->PIN);} else{CLEAR_BIT(DDRA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRB, _pin->PIN);} else{CLEAR_BIT(DDRB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRC, _pin->PIN);} else{CLEAR_BIT(DDRC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_DIRECTION_OUTPUT == direction_config){SET_BIT(DDRD, _pin->PIN);} else{CLEAR_BIT(DDRD, _pin->PIN);} break;
			default:	      	ret = E_NOT_OK;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return ret;
}
 6bc:	08 95       	ret

000006be <GPIO_PIN_WRITE_LOGIC>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <GPIO_PIN_WRITE_LOGIC+0x6>
 6c2:	7e c0       	rjmp	.+252    	; 0x7c0 <GPIO_PIN_WRITE_LOGIC+0x102>
 6c4:	fc 01       	movw	r30, r24
 6c6:	20 81       	ld	r18, Z
 6c8:	22 95       	swap	r18
 6ca:	2f 70       	andi	r18, 0x0F	; 15
 6cc:	27 70       	andi	r18, 0x07	; 7
 6ce:	80 81       	ld	r24, Z
 6d0:	86 95       	lsr	r24
 6d2:	86 95       	lsr	r24
 6d4:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	11 f1       	breq	.+68     	; 0x71e <GPIO_PIN_WRITE_LOGIC+0x60>
 6da:	30 f0       	brcs	.+12     	; 0x6e8 <GPIO_PIN_WRITE_LOGIC+0x2a>
 6dc:	82 30       	cpi	r24, 0x02	; 2
 6de:	d1 f1       	breq	.+116    	; 0x754 <GPIO_PIN_WRITE_LOGIC+0x96>
 6e0:	83 30       	cpi	r24, 0x03	; 3
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <GPIO_PIN_WRITE_LOGIC+0x28>
 6e4:	52 c0       	rjmp	.+164    	; 0x78a <GPIO_PIN_WRITE_LOGIC+0xcc>
 6e6:	6e c0       	rjmp	.+220    	; 0x7c4 <GPIO_PIN_WRITE_LOGIC+0x106>
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
 6e8:	61 30       	cpi	r22, 0x01	; 1
 6ea:	61 f4       	brne	.+24     	; 0x704 <GPIO_PIN_WRITE_LOGIC+0x46>
 6ec:	3b b3       	in	r19, 0x1b	; 27
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <GPIO_PIN_WRITE_LOGIC+0x3a>
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	2a 95       	dec	r18
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <GPIO_PIN_WRITE_LOGIC+0x36>
 6fc:	83 2b       	or	r24, r19
 6fe:	8b bb       	out	0x1b, r24	; 27
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
 704:	3b b3       	in	r19, 0x1b	; 27
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <GPIO_PIN_WRITE_LOGIC+0x52>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	2a 95       	dec	r18
 712:	e2 f7       	brpl	.-8      	; 0x70c <GPIO_PIN_WRITE_LOGIC+0x4e>
 714:	80 95       	com	r24
 716:	83 23       	and	r24, r19
 718:	8b bb       	out	0x1b, r24	; 27
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
 71e:	61 30       	cpi	r22, 0x01	; 1
 720:	61 f4       	brne	.+24     	; 0x73a <GPIO_PIN_WRITE_LOGIC+0x7c>
 722:	38 b3       	in	r19, 0x18	; 24
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <GPIO_PIN_WRITE_LOGIC+0x70>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	2a 95       	dec	r18
 730:	e2 f7       	brpl	.-8      	; 0x72a <GPIO_PIN_WRITE_LOGIC+0x6c>
 732:	83 2b       	or	r24, r19
 734:	88 bb       	out	0x18, r24	; 24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	08 95       	ret
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
 73a:	38 b3       	in	r19, 0x18	; 24
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <GPIO_PIN_WRITE_LOGIC+0x88>
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	2a 95       	dec	r18
 748:	e2 f7       	brpl	.-8      	; 0x742 <GPIO_PIN_WRITE_LOGIC+0x84>
 74a:	80 95       	com	r24
 74c:	83 23       	and	r24, r19
 74e:	88 bb       	out	0x18, r24	; 24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
 754:	61 30       	cpi	r22, 0x01	; 1
 756:	61 f4       	brne	.+24     	; 0x770 <GPIO_PIN_WRITE_LOGIC+0xb2>
 758:	35 b3       	in	r19, 0x15	; 21
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 c0       	rjmp	.+4      	; 0x764 <GPIO_PIN_WRITE_LOGIC+0xa6>
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	2a 95       	dec	r18
 766:	e2 f7       	brpl	.-8      	; 0x760 <GPIO_PIN_WRITE_LOGIC+0xa2>
 768:	83 2b       	or	r24, r19
 76a:	85 bb       	out	0x15, r24	; 21
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	08 95       	ret
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
 770:	35 b3       	in	r19, 0x15	; 21
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <GPIO_PIN_WRITE_LOGIC+0xbe>
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	2a 95       	dec	r18
 77e:	e2 f7       	brpl	.-8      	; 0x778 <GPIO_PIN_WRITE_LOGIC+0xba>
 780:	80 95       	com	r24
 782:	83 23       	and	r24, r19
 784:	85 bb       	out	0x15, r24	; 21
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTD, _pin->PIN);} else{CLEAR_BIT(PORTD, _pin->PIN);} break;
 78a:	61 30       	cpi	r22, 0x01	; 1
 78c:	61 f4       	brne	.+24     	; 0x7a6 <GPIO_PIN_WRITE_LOGIC+0xe8>
 78e:	32 b3       	in	r19, 0x12	; 18
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 c0       	rjmp	.+4      	; 0x79a <GPIO_PIN_WRITE_LOGIC+0xdc>
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	2a 95       	dec	r18
 79c:	e2 f7       	brpl	.-8      	; 0x796 <GPIO_PIN_WRITE_LOGIC+0xd8>
 79e:	83 2b       	or	r24, r19
 7a0:	82 bb       	out	0x12, r24	; 18
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	08 95       	ret
	else{
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTD, _pin->PIN);} else{CLEAR_BIT(PORTD, _pin->PIN);} break;
 7a6:	32 b3       	in	r19, 0x12	; 18
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <GPIO_PIN_WRITE_LOGIC+0xf4>
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	2a 95       	dec	r18
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <GPIO_PIN_WRITE_LOGIC+0xf0>
 7b6:	80 95       	com	r24
 7b8:	83 23       	and	r24, r19
 7ba:	82 bb       	out	0x12, r24	; 18
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_WRITE_LOGIC(const pin_config_t *_pin, uint8 logic_config){
	Std_ReturnType ret = E_OK;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	08 95       	ret
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTA, _pin->PIN);} else{CLEAR_BIT(PORTA, _pin->PIN);} break;
			case GPIO_PORTB :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTB, _pin->PIN);} else{CLEAR_BIT(PORTB, _pin->PIN);} break;
			case GPIO_PORTC :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTC, _pin->PIN);} else{CLEAR_BIT(PORTC, _pin->PIN);} break;
			case GPIO_PORTD :	if(GPIO_LOGIC_HIGH == logic_config){SET_BIT(PORTD, _pin->PIN);} else{CLEAR_BIT(PORTD, _pin->PIN);} break;
			default:	      	ret = E_NOT_OK;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 7c6:	08 95       	ret

000007c8 <GPIO_PIN_READ_LOGIC>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (NULL == pin_status) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	09 f4       	brne	.+2      	; 0x7ce <GPIO_PIN_READ_LOGIC+0x6>
 7cc:	45 c0       	rjmp	.+138    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 7ce:	61 15       	cp	r22, r1
 7d0:	71 05       	cpc	r23, r1
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <GPIO_PIN_READ_LOGIC+0xe>
 7d4:	43 c0       	rjmp	.+134    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 7d6:	fc 01       	movw	r30, r24
 7d8:	20 81       	ld	r18, Z
 7da:	22 95       	swap	r18
 7dc:	2f 70       	andi	r18, 0x0F	; 15
 7de:	27 70       	andi	r18, 0x07	; 7
 7e0:	80 81       	ld	r24, Z
 7e2:	86 95       	lsr	r24
 7e4:	86 95       	lsr	r24
 7e6:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	91 f0       	breq	.+36     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ec:	28 f0       	brcs	.+10     	; 0x7f8 <GPIO_PIN_READ_LOGIC+0x30>
 7ee:	82 30       	cpi	r24, 0x02	; 2
 7f0:	d9 f0       	breq	.+54     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7f2:	83 30       	cpi	r24, 0x03	; 3
 7f4:	29 f1       	breq	.+74     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7f6:	34 c0       	rjmp	.+104    	; 0x860 <__stack+0x1>
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
 7f8:	89 b3       	in	r24, 0x19	; 25
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	95 95       	asr	r25
 800:	87 95       	ror	r24
 802:	2a 95       	dec	r18
 804:	e2 f7       	brpl	.-8      	; 0x7fe <GPIO_PIN_READ_LOGIC+0x36>
 806:	81 70       	andi	r24, 0x01	; 1
 808:	fb 01       	movw	r30, r22
 80a:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 80c:	81 e0       	ldi	r24, 0x01	; 1
	if((NULL == _pin) || (NULL == pin_status) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
 80e:	08 95       	ret
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
 810:	86 b3       	in	r24, 0x16	; 22
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	95 95       	asr	r25
 818:	87 95       	ror	r24
 81a:	2a 95       	dec	r18
 81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81e:	81 70       	andi	r24, 0x01	; 1
 820:	fb 01       	movw	r30, r22
 822:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 824:	81 e0       	ldi	r24, 0x01	; 1
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
 826:	08 95       	ret
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
 828:	83 b3       	in	r24, 0x13	; 19
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82e:	95 95       	asr	r25
 830:	87 95       	ror	r24
 832:	2a 95       	dec	r18
 834:	e2 f7       	brpl	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 836:	81 70       	andi	r24, 0x01	; 1
 838:	fb 01       	movw	r30, r22
 83a:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 83c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
 83e:	08 95       	ret
			case GPIO_PORTD : *pin_status = READ_BIT(PIND, _pin->PIN);	 break;
 840:	80 b3       	in	r24, 0x10	; 16
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 846:	95 95       	asr	r25
 848:	87 95       	ror	r24
 84a:	2a 95       	dec	r18
 84c:	e2 f7       	brpl	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	81 70       	andi	r24, 0x01	; 1
 850:	fb 01       	movw	r30, r22
 852:	80 83       	st	Z, r24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
 854:	81 e0       	ldi	r24, 0x01	; 1
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
			case GPIO_PORTD : *pin_status = READ_BIT(PIND, _pin->PIN);	 break;
 856:	08 95       	ret
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_READ_LOGIC(const pin_config_t *_pin, uint8 *pin_status){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (NULL == pin_status) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	08 95       	ret
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA : *pin_status = READ_BIT(PINA, _pin->PIN);	 break;
			case GPIO_PORTB : *pin_status = READ_BIT(PINB, _pin->PIN);	 break;
			case GPIO_PORTC : *pin_status = READ_BIT(PINC, _pin->PIN);	 break;
			case GPIO_PORTD : *pin_status = READ_BIT(PIND, _pin->PIN);	 break;
			default:	      	ret = E_NOT_OK;
 860:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 862:	08 95       	ret

00000864 <GPIO_PIN_TOGGLE>:
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	09 f4       	brne	.+2      	; 0x86a <GPIO_PIN_TOGGLE+0x6>
 868:	41 c0       	rjmp	.+130    	; 0x8ec <GPIO_PIN_TOGGLE+0x88>
 86a:	fc 01       	movw	r30, r24
 86c:	20 81       	ld	r18, Z
 86e:	22 95       	swap	r18
 870:	2f 70       	andi	r18, 0x0F	; 15
 872:	27 70       	andi	r18, 0x07	; 7
 874:	80 81       	ld	r24, Z
 876:	86 95       	lsr	r24
 878:	86 95       	lsr	r24
 87a:	83 70       	andi	r24, 0x03	; 3
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	91 f0       	breq	.+36     	; 0x8a4 <GPIO_PIN_TOGGLE+0x40>
 880:	28 f0       	brcs	.+10     	; 0x88c <GPIO_PIN_TOGGLE+0x28>
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	d9 f0       	breq	.+54     	; 0x8bc <GPIO_PIN_TOGGLE+0x58>
 886:	83 30       	cpi	r24, 0x03	; 3
 888:	29 f1       	breq	.+74     	; 0x8d4 <GPIO_PIN_TOGGLE+0x70>
 88a:	32 c0       	rjmp	.+100    	; 0x8f0 <GPIO_PIN_TOGGLE+0x8c>
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
 88c:	3b b3       	in	r19, 0x1b	; 27
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <GPIO_PIN_TOGGLE+0x34>
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	2a 95       	dec	r18
 89a:	e2 f7       	brpl	.-8      	; 0x894 <GPIO_PIN_TOGGLE+0x30>
 89c:	83 27       	eor	r24, r19
 89e:	8b bb       	out	0x1b, r24	; 27
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8a0:	81 e0       	ldi	r24, 0x01	; 1
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
 8a2:	08 95       	ret
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
 8a4:	38 b3       	in	r19, 0x18	; 24
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <GPIO_PIN_TOGGLE+0x4c>
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	2a 95       	dec	r18
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <GPIO_PIN_TOGGLE+0x48>
 8b4:	83 27       	eor	r24, r19
 8b6:	88 bb       	out	0x18, r24	; 24
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
		ret = E_NOT_OK;
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
 8ba:	08 95       	ret
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
 8bc:	35 b3       	in	r19, 0x15	; 21
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <GPIO_PIN_TOGGLE+0x64>
 8c4:	88 0f       	add	r24, r24
 8c6:	99 1f       	adc	r25, r25
 8c8:	2a 95       	dec	r18
 8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <GPIO_PIN_TOGGLE+0x60>
 8cc:	83 27       	eor	r24, r19
 8ce:	85 bb       	out	0x15, r24	; 21
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
 8d2:	08 95       	ret
			case GPIO_PORTD : TOG_BIT(PORTD, _pin->PIN); break;
 8d4:	32 b3       	in	r19, 0x12	; 18
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <GPIO_PIN_TOGGLE+0x7c>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	2a 95       	dec	r18
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <GPIO_PIN_TOGGLE+0x78>
 8e4:	83 27       	eor	r24, r19
 8e6:	82 bb       	out	0x12, r24	; 18
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
	else{
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
			case GPIO_PORTD : TOG_BIT(PORTD, _pin->PIN); break;
 8ea:	08 95       	ret
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_TOGGLE(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	08 95       	ret
		switch(_pin->PORT){
			case GPIO_PORTA : TOG_BIT(PORTA, _pin->PIN); break;
			case GPIO_PORTB : TOG_BIT(PORTB, _pin->PIN); break;
			case GPIO_PORTC : TOG_BIT(PORTC, _pin->PIN); break;
			case GPIO_PORTD : TOG_BIT(PORTD, _pin->PIN); break;
			default:	      	ret = E_NOT_OK;
 8f0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return ret;
}
 8f2:	08 95       	ret

000008f4 <GPIO_PIN_INIT>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_INIT(const pin_config_t *_pin){
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	59 f0       	breq	.+22     	; 0x912 <GPIO_PIN_INIT+0x1e>
 8fc:	ec 01       	movw	r28, r24
		ret = E_NOT_OK;
	}
	else{
		ret = GPIO_PIN_SET_DIRECTION(_pin, GPIO_DIRECTION_OUTPUT);
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	0e 94 da 02 	call	0x5b4	; 0x5b4 <GPIO_PIN_SET_DIRECTION>
		ret = GPIO_PIN_WRITE_LOGIC(_pin, _pin->LOGIC);
 904:	68 81       	ld	r22, Y
 906:	66 95       	lsr	r22
 908:	61 70       	andi	r22, 0x01	; 1
 90a:	ce 01       	movw	r24, r28
 90c:	0e 94 5f 03 	call	0x6be	; 0x6be <GPIO_PIN_WRITE_LOGIC>
 910:	01 c0       	rjmp	.+2      	; 0x914 <GPIO_PIN_INIT+0x20>
  * @complexity : O(1)
  */
Std_ReturnType GPIO_PIN_INIT(const pin_config_t *_pin){
	Std_ReturnType ret = E_OK;
	if((NULL == _pin) || (GPIO_PIN_MAX_NUMBER-1 < _pin->PIN) || (GPIO_PORT_MAX_NUMBER-1 < _pin->PORT)){
		ret = E_NOT_OK;
 912:	80 e0       	ldi	r24, 0x00	; 0
	else{
		ret = GPIO_PIN_SET_DIRECTION(_pin, GPIO_DIRECTION_OUTPUT);
		ret = GPIO_PIN_WRITE_LOGIC(_pin, _pin->LOGIC);
	}
	return ret;
}
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <TIMER0_init>:
  * @param  
  * @return
  * @complexity : O(1)
  */
void TIMER0_stop(void){
	TCCR0 = 0;
 91a:	62 bf       	out	0x32, r22	; 50
 91c:	83 bf       	out	0x33, r24	; 51
 91e:	08 95       	ret

00000920 <TIMER0_setPreload>:
 920:	82 bf       	out	0x32, r24	; 50
 922:	08 95       	ret

00000924 <TIMER0_start>:
 924:	ff 92       	push	r15
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	8c 01       	movw	r16, r24
 930:	f6 2e       	mov	r15, r22
 932:	c0 e0       	ldi	r28, 0x00	; 0
 934:	d0 e0       	ldi	r29, 0x00	; 0
 936:	11 c0       	rjmp	.+34     	; 0x95a <TIMER0_start+0x36>
 938:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <exit_flag>
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	19 f4       	brne	.+6      	; 0x946 <TIMER0_start+0x22>
 940:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <exit_flag>
 944:	0d c0       	rjmp	.+26     	; 0x960 <TIMER0_start+0x3c>
 946:	08 b6       	in	r0, 0x38	; 56
 948:	00 fe       	sbrs	r0, 0
 94a:	fd cf       	rjmp	.-6      	; 0x946 <TIMER0_start+0x22>
 94c:	21 96       	adiw	r28, 0x01	; 1
 94e:	8f 2d       	mov	r24, r15
 950:	0e 94 90 04 	call	0x920	; 0x920 <TIMER0_setPreload>
 954:	88 b7       	in	r24, 0x38	; 56
 956:	81 60       	ori	r24, 0x01	; 1
 958:	88 bf       	out	0x38, r24	; 56
 95a:	c0 17       	cp	r28, r16
 95c:	d1 07       	cpc	r29, r17
 95e:	64 f3       	brlt	.-40     	; 0x938 <TIMER0_start+0x14>
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	1f 91       	pop	r17
 966:	0f 91       	pop	r16
 968:	ff 90       	pop	r15
 96a:	08 95       	ret

0000096c <TIMER0_reset>:
  * @param  
  * @return
  * @complexity : O(1)
  */
void TIMER0_reset(void){
	exit_flag = 1;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <exit_flag>
 972:	08 95       	ret

00000974 <TIMER0_DelayInMilliSec>:
  * @description 
  * @param  
  * @return
  * @complexity : O(1)
  */
void TIMER0_DelayInMilliSec(int TimeMs){
 974:	8f 92       	push	r8
 976:	9f 92       	push	r9
 978:	af 92       	push	r10
 97a:	bf 92       	push	r11
 97c:	cf 92       	push	r12
 97e:	df 92       	push	r13
 980:	ef 92       	push	r14
 982:	ff 92       	push	r15
 984:	cf 93       	push	r28
	// generate timer delay
	// first calculate number of overflows and preload from given time in ms
	int N = (((float)TimeMs / 1000.0) / (256 * (64.0 / 1000000.0)));
 986:	bc 01       	movw	r22, r24
 988:	99 0f       	add	r25, r25
 98a:	88 0b       	sbc	r24, r24
 98c:	99 0b       	sbc	r25, r25
 98e:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 992:	20 e0       	ldi	r18, 0x00	; 0
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	4a e7       	ldi	r20, 0x7A	; 122
 998:	54 e4       	ldi	r21, 0x44	; 68
 99a:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 99e:	4b 01       	movw	r8, r22
 9a0:	5c 01       	movw	r10, r24
 9a2:	2d eb       	ldi	r18, 0xBD	; 189
 9a4:	37 e3       	ldi	r19, 0x37	; 55
 9a6:	46 e8       	ldi	r20, 0x86	; 134
 9a8:	5c e3       	ldi	r21, 0x3C	; 60
 9aa:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 9ae:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fixsfsi>
 9b2:	6b 01       	movw	r12, r22
 9b4:	7c 01       	movw	r14, r24
	uint8 preload = 256 - (uint8)((float)(((float)TimeMs / 1000.0) / (256 * (1024.0 / 1000000.0))) / (float)N);
 9b6:	2d eb       	ldi	r18, 0xBD	; 189
 9b8:	37 e3       	ldi	r19, 0x37	; 55
 9ba:	46 e8       	ldi	r20, 0x86	; 134
 9bc:	5e e3       	ldi	r21, 0x3E	; 62
 9be:	c5 01       	movw	r24, r10
 9c0:	b4 01       	movw	r22, r8
 9c2:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 9c6:	4b 01       	movw	r8, r22
 9c8:	5c 01       	movw	r10, r24
 9ca:	b6 01       	movw	r22, r12
 9cc:	0d 2c       	mov	r0, r13
 9ce:	00 0c       	add	r0, r0
 9d0:	88 0b       	sbc	r24, r24
 9d2:	99 0b       	sbc	r25, r25
 9d4:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	c5 01       	movw	r24, r10
 9de:	b4 01       	movw	r22, r8
 9e0:	0e 94 08 05 	call	0xa10	; 0xa10 <__divsf3>
 9e4:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
 9e8:	c6 2f       	mov	r28, r22
 9ea:	c1 95       	neg	r28
	// initialize timer with  prescaler
	TIMER0_init(TIMER_0_PRESCALER_64, preload);
 9ec:	6c 2f       	mov	r22, r28
 9ee:	83 e0       	ldi	r24, 0x03	; 3
 9f0:	0e 94 8d 04 	call	0x91a	; 0x91a <TIMER0_init>
	// start timer with given number of overflows and preload value
	TIMER0_start(N, preload);
 9f4:	6c 2f       	mov	r22, r28
 9f6:	c6 01       	movw	r24, r12
 9f8:	0e 94 92 04 	call	0x924	; 0x924 <TIMER0_start>
 9fc:	cf 91       	pop	r28
 9fe:	ff 90       	pop	r15
 a00:	ef 90       	pop	r14
 a02:	df 90       	pop	r13
 a04:	cf 90       	pop	r12
 a06:	bf 90       	pop	r11
 a08:	af 90       	pop	r10
 a0a:	9f 90       	pop	r9
 a0c:	8f 90       	pop	r8
 a0e:	08 95       	ret

00000a10 <__divsf3>:
 a10:	0e 94 1c 05 	call	0xa38	; 0xa38 <__divsf3x>
 a14:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_round>
 a18:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_pscB>
 a1c:	58 f0       	brcs	.+22     	; 0xa34 <__divsf3+0x24>
 a1e:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_pscA>
 a22:	40 f0       	brcs	.+16     	; 0xa34 <__divsf3+0x24>
 a24:	29 f4       	brne	.+10     	; 0xa30 <__divsf3+0x20>
 a26:	5f 3f       	cpi	r21, 0xFF	; 255
 a28:	29 f0       	breq	.+10     	; 0xa34 <__divsf3+0x24>
 a2a:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_inf>
 a2e:	51 11       	cpse	r21, r1
 a30:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_szero>
 a34:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__fp_nan>

00000a38 <__divsf3x>:
 a38:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_split3>
 a3c:	68 f3       	brcs	.-38     	; 0xa18 <__divsf3+0x8>

00000a3e <__divsf3_pse>:
 a3e:	99 23       	and	r25, r25
 a40:	b1 f3       	breq	.-20     	; 0xa2e <__divsf3+0x1e>
 a42:	55 23       	and	r21, r21
 a44:	91 f3       	breq	.-28     	; 0xa2a <__divsf3+0x1a>
 a46:	95 1b       	sub	r25, r21
 a48:	55 0b       	sbc	r21, r21
 a4a:	bb 27       	eor	r27, r27
 a4c:	aa 27       	eor	r26, r26
 a4e:	62 17       	cp	r22, r18
 a50:	73 07       	cpc	r23, r19
 a52:	84 07       	cpc	r24, r20
 a54:	38 f0       	brcs	.+14     	; 0xa64 <__divsf3_pse+0x26>
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	5f 4f       	sbci	r21, 0xFF	; 255
 a5a:	22 0f       	add	r18, r18
 a5c:	33 1f       	adc	r19, r19
 a5e:	44 1f       	adc	r20, r20
 a60:	aa 1f       	adc	r26, r26
 a62:	a9 f3       	breq	.-22     	; 0xa4e <__divsf3_pse+0x10>
 a64:	35 d0       	rcall	.+106    	; 0xad0 <__divsf3_pse+0x92>
 a66:	0e 2e       	mov	r0, r30
 a68:	3a f0       	brmi	.+14     	; 0xa78 <__divsf3_pse+0x3a>
 a6a:	e0 e8       	ldi	r30, 0x80	; 128
 a6c:	32 d0       	rcall	.+100    	; 0xad2 <__divsf3_pse+0x94>
 a6e:	91 50       	subi	r25, 0x01	; 1
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	e6 95       	lsr	r30
 a74:	00 1c       	adc	r0, r0
 a76:	ca f7       	brpl	.-14     	; 0xa6a <__divsf3_pse+0x2c>
 a78:	2b d0       	rcall	.+86     	; 0xad0 <__divsf3_pse+0x92>
 a7a:	fe 2f       	mov	r31, r30
 a7c:	29 d0       	rcall	.+82     	; 0xad0 <__divsf3_pse+0x92>
 a7e:	66 0f       	add	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	bb 1f       	adc	r27, r27
 a86:	26 17       	cp	r18, r22
 a88:	37 07       	cpc	r19, r23
 a8a:	48 07       	cpc	r20, r24
 a8c:	ab 07       	cpc	r26, r27
 a8e:	b0 e8       	ldi	r27, 0x80	; 128
 a90:	09 f0       	breq	.+2      	; 0xa94 <__divsf3_pse+0x56>
 a92:	bb 0b       	sbc	r27, r27
 a94:	80 2d       	mov	r24, r0
 a96:	bf 01       	movw	r22, r30
 a98:	ff 27       	eor	r31, r31
 a9a:	93 58       	subi	r25, 0x83	; 131
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x70>
 aa0:	9e 3f       	cpi	r25, 0xFE	; 254
 aa2:	51 05       	cpc	r21, r1
 aa4:	78 f0       	brcs	.+30     	; 0xac4 <__divsf3_pse+0x86>
 aa6:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_inf>
 aaa:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_szero>
 aae:	5f 3f       	cpi	r21, 0xFF	; 255
 ab0:	e4 f3       	brlt	.-8      	; 0xaaa <__divsf3_pse+0x6c>
 ab2:	98 3e       	cpi	r25, 0xE8	; 232
 ab4:	d4 f3       	brlt	.-12     	; 0xaaa <__divsf3_pse+0x6c>
 ab6:	86 95       	lsr	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	f7 95       	ror	r31
 ac0:	9f 5f       	subi	r25, 0xFF	; 255
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <__divsf3_pse+0x78>
 ac4:	88 0f       	add	r24, r24
 ac6:	91 1d       	adc	r25, r1
 ac8:	96 95       	lsr	r25
 aca:	87 95       	ror	r24
 acc:	97 f9       	bld	r25, 7
 ace:	08 95       	ret
 ad0:	e1 e0       	ldi	r30, 0x01	; 1
 ad2:	66 0f       	add	r22, r22
 ad4:	77 1f       	adc	r23, r23
 ad6:	88 1f       	adc	r24, r24
 ad8:	bb 1f       	adc	r27, r27
 ada:	62 17       	cp	r22, r18
 adc:	73 07       	cpc	r23, r19
 ade:	84 07       	cpc	r24, r20
 ae0:	ba 07       	cpc	r27, r26
 ae2:	20 f0       	brcs	.+8      	; 0xaec <__divsf3_pse+0xae>
 ae4:	62 1b       	sub	r22, r18
 ae6:	73 0b       	sbc	r23, r19
 ae8:	84 0b       	sbc	r24, r20
 aea:	ba 0b       	sbc	r27, r26
 aec:	ee 1f       	adc	r30, r30
 aee:	88 f7       	brcc	.-30     	; 0xad2 <__divsf3_pse+0x94>
 af0:	e0 95       	com	r30
 af2:	08 95       	ret

00000af4 <__fixsfsi>:
 af4:	0e 94 81 05 	call	0xb02	; 0xb02 <__fixunssfsi>
 af8:	68 94       	set
 afa:	b1 11       	cpse	r27, r1
 afc:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_szero>
 b00:	08 95       	ret

00000b02 <__fixunssfsi>:
 b02:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_splitA>
 b06:	88 f0       	brcs	.+34     	; 0xb2a <__fixunssfsi+0x28>
 b08:	9f 57       	subi	r25, 0x7F	; 127
 b0a:	98 f0       	brcs	.+38     	; 0xb32 <__fixunssfsi+0x30>
 b0c:	b9 2f       	mov	r27, r25
 b0e:	99 27       	eor	r25, r25
 b10:	b7 51       	subi	r27, 0x17	; 23
 b12:	b0 f0       	brcs	.+44     	; 0xb40 <__fixunssfsi+0x3e>
 b14:	e1 f0       	breq	.+56     	; 0xb4e <__fixunssfsi+0x4c>
 b16:	66 0f       	add	r22, r22
 b18:	77 1f       	adc	r23, r23
 b1a:	88 1f       	adc	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	1a f0       	brmi	.+6      	; 0xb26 <__fixunssfsi+0x24>
 b20:	ba 95       	dec	r27
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__fixunssfsi+0x14>
 b24:	14 c0       	rjmp	.+40     	; 0xb4e <__fixunssfsi+0x4c>
 b26:	b1 30       	cpi	r27, 0x01	; 1
 b28:	91 f0       	breq	.+36     	; 0xb4e <__fixunssfsi+0x4c>
 b2a:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_zero>
 b2e:	b1 e0       	ldi	r27, 0x01	; 1
 b30:	08 95       	ret
 b32:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__fp_zero>
 b36:	67 2f       	mov	r22, r23
 b38:	78 2f       	mov	r23, r24
 b3a:	88 27       	eor	r24, r24
 b3c:	b8 5f       	subi	r27, 0xF8	; 248
 b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x4c>
 b40:	b9 3f       	cpi	r27, 0xF9	; 249
 b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x34>
 b44:	86 95       	lsr	r24
 b46:	77 95       	ror	r23
 b48:	67 95       	ror	r22
 b4a:	b3 95       	inc	r27
 b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x42>
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x5c>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	08 95       	ret

00000b60 <__floatunsisf>:
 b60:	e8 94       	clt
 b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
 b64:	97 fb       	bst	r25, 7
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	99 23       	and	r25, r25
 b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
 b7a:	f9 2f       	mov	r31, r25
 b7c:	96 e9       	ldi	r25, 0x96	; 150
 b7e:	bb 27       	eor	r27, r27
 b80:	93 95       	inc	r25
 b82:	f6 95       	lsr	r31
 b84:	87 95       	ror	r24
 b86:	77 95       	ror	r23
 b88:	67 95       	ror	r22
 b8a:	b7 95       	ror	r27
 b8c:	f1 11       	cpse	r31, r1
 b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
 b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
 b92:	bb 0f       	add	r27, r27
 b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
 b96:	60 ff       	sbrs	r22, 0
 b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
 b9a:	6f 5f       	subi	r22, 0xFF	; 255
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
 ba4:	88 23       	and	r24, r24
 ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
 ba8:	96 e9       	ldi	r25, 0x96	; 150
 baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
 bac:	77 23       	and	r23, r23
 bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
 bb0:	9e e8       	ldi	r25, 0x8E	; 142
 bb2:	87 2f       	mov	r24, r23
 bb4:	76 2f       	mov	r23, r22
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
 bb8:	66 23       	and	r22, r22
 bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
 bbc:	96 e8       	ldi	r25, 0x86	; 134
 bbe:	86 2f       	mov	r24, r22
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
 bc6:	9a 95       	dec	r25
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	88 1f       	adc	r24, r24
 bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
 bd0:	88 0f       	add	r24, r24
 bd2:	96 95       	lsr	r25
 bd4:	87 95       	ror	r24
 bd6:	97 f9       	bld	r25, 7
 bd8:	08 95       	ret

00000bda <__fp_inf>:
 bda:	97 f9       	bld	r25, 7
 bdc:	9f 67       	ori	r25, 0x7F	; 127
 bde:	80 e8       	ldi	r24, 0x80	; 128
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	08 95       	ret

00000be6 <__fp_nan>:
 be6:	9f ef       	ldi	r25, 0xFF	; 255
 be8:	80 ec       	ldi	r24, 0xC0	; 192
 bea:	08 95       	ret

00000bec <__fp_pscA>:
 bec:	00 24       	eor	r0, r0
 bee:	0a 94       	dec	r0
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	09 06       	cpc	r0, r25
 bf8:	08 95       	ret

00000bfa <__fp_pscB>:
 bfa:	00 24       	eor	r0, r0
 bfc:	0a 94       	dec	r0
 bfe:	12 16       	cp	r1, r18
 c00:	13 06       	cpc	r1, r19
 c02:	14 06       	cpc	r1, r20
 c04:	05 06       	cpc	r0, r21
 c06:	08 95       	ret

00000c08 <__fp_round>:
 c08:	09 2e       	mov	r0, r25
 c0a:	03 94       	inc	r0
 c0c:	00 0c       	add	r0, r0
 c0e:	11 f4       	brne	.+4      	; 0xc14 <__fp_round+0xc>
 c10:	88 23       	and	r24, r24
 c12:	52 f0       	brmi	.+20     	; 0xc28 <__fp_round+0x20>
 c14:	bb 0f       	add	r27, r27
 c16:	40 f4       	brcc	.+16     	; 0xc28 <__fp_round+0x20>
 c18:	bf 2b       	or	r27, r31
 c1a:	11 f4       	brne	.+4      	; 0xc20 <__fp_round+0x18>
 c1c:	60 ff       	sbrs	r22, 0
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__fp_round+0x20>
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <__fp_split3>:
 c2a:	57 fd       	sbrc	r21, 7
 c2c:	90 58       	subi	r25, 0x80	; 128
 c2e:	44 0f       	add	r20, r20
 c30:	55 1f       	adc	r21, r21
 c32:	59 f0       	breq	.+22     	; 0xc4a <__fp_splitA+0x10>
 c34:	5f 3f       	cpi	r21, 0xFF	; 255
 c36:	71 f0       	breq	.+28     	; 0xc54 <__fp_splitA+0x1a>
 c38:	47 95       	ror	r20

00000c3a <__fp_splitA>:
 c3a:	88 0f       	add	r24, r24
 c3c:	97 fb       	bst	r25, 7
 c3e:	99 1f       	adc	r25, r25
 c40:	61 f0       	breq	.+24     	; 0xc5a <__fp_splitA+0x20>
 c42:	9f 3f       	cpi	r25, 0xFF	; 255
 c44:	79 f0       	breq	.+30     	; 0xc64 <__fp_splitA+0x2a>
 c46:	87 95       	ror	r24
 c48:	08 95       	ret
 c4a:	12 16       	cp	r1, r18
 c4c:	13 06       	cpc	r1, r19
 c4e:	14 06       	cpc	r1, r20
 c50:	55 1f       	adc	r21, r21
 c52:	f2 cf       	rjmp	.-28     	; 0xc38 <__fp_split3+0xe>
 c54:	46 95       	lsr	r20
 c56:	f1 df       	rcall	.-30     	; 0xc3a <__fp_splitA>
 c58:	08 c0       	rjmp	.+16     	; 0xc6a <__fp_splitA+0x30>
 c5a:	16 16       	cp	r1, r22
 c5c:	17 06       	cpc	r1, r23
 c5e:	18 06       	cpc	r1, r24
 c60:	99 1f       	adc	r25, r25
 c62:	f1 cf       	rjmp	.-30     	; 0xc46 <__fp_splitA+0xc>
 c64:	86 95       	lsr	r24
 c66:	71 05       	cpc	r23, r1
 c68:	61 05       	cpc	r22, r1
 c6a:	08 94       	sec
 c6c:	08 95       	ret

00000c6e <__fp_zero>:
 c6e:	e8 94       	clt

00000c70 <__fp_szero>:
 c70:	bb 27       	eor	r27, r27
 c72:	66 27       	eor	r22, r22
 c74:	77 27       	eor	r23, r23
 c76:	cb 01       	movw	r24, r22
 c78:	97 f9       	bld	r25, 7
 c7a:	08 95       	ret

00000c7c <_exit>:
 c7c:	f8 94       	cli

00000c7e <__stop_program>:
 c7e:	ff cf       	rjmp	.-2      	; 0xc7e <__stop_program>
